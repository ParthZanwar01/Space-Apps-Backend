{"ast":null,"code":"import axios from'axios';const API_BASE_URL=process.env.REACT_APP_API_URL||'https://space-apps-backend.onrender.com';const api=axios.create({baseURL:API_BASE_URL,timeout:30000,headers:{'Content-Type':'application/json'}});// Request interceptor\napi.interceptors.request.use(config=>{var _config$method;console.log(\"Making \".concat((_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase(),\" request to: \").concat(config.url));return config;},error=>{console.error('Request error:',error);return Promise.reject(error);});// Response interceptor\napi.interceptors.response.use(response=>{console.log(\"Response from \".concat(response.config.url,\":\"),response.status);return response;},error=>{var _error$response;console.error('Response error:',((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.data)||error.message);return Promise.reject(error);});export const analyzeImage=async imageFile=>{try{const formData=new FormData();formData.append('image',imageFile);const response=await api.post('/api/analyze',formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;}catch(error){var _error$response2,_error$response2$data;console.error('Image analysis failed:',error);throw new Error(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.error)||'Image analysis failed');}};export const planPath=async function(debrisList){let startPosition=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[0,0,0];try{const response=await api.post('/api/plan-path',{debris_list:debrisList,start_position:startPosition});return response.data;}catch(error){var _error$response3,_error$response3$data;console.error('Path planning failed:',error);throw new Error(((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.error)||'Path planning failed');}};export const batchAnalyze=async imageFiles=>{try{const formData=new FormData();imageFiles.forEach((file,index)=>{formData.append('images',file);});const response=await api.post('/api/batch-analyze',formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;}catch(error){var _error$response4,_error$response4$data;console.error('Batch analysis failed:',error);throw new Error(((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.error)||'Batch analysis failed');}};export const createVisualization=async(imageData,analysis)=>{try{const response=await api.post('/api/visualize',{image_data:imageData,analysis:analysis});return response.data;}catch(error){var _error$response5,_error$response5$data;console.error('Visualization creation failed:',error);throw new Error(((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.error)||'Visualization creation failed');}};export const getHealthStatus=async()=>{try{const response=await api.get('/api/health');return response.data;}catch(error){console.error('Health check failed:',error);throw new Error('Server is not responding');}};export const getAlternativePaths=async function(debrisList){let startPosition=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[0,0,0];let numAlternatives=arguments.length>2&&arguments[2]!==undefined?arguments[2]:3;try{const response=await api.post('/api/alternative-paths',{debris_list:debrisList,start_position:startPosition,num_alternatives:numAlternatives});return response.data;}catch(error){var _error$response6,_error$response6$data;console.error('Alternative paths failed:',error);throw new Error(((_error$response6=error.response)===null||_error$response6===void 0?void 0:(_error$response6$data=_error$response6.data)===null||_error$response6$data===void 0?void 0:_error$response6$data.error)||'Alternative paths failed');}};export const exportAnalysis=async function(analysisData){let format=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'json';try{const response=await api.post('/api/export',{data:analysisData,format:format},{responseType:'blob'});// Create download link\nconst url=window.URL.createObjectURL(new Blob([response.data]));const link=document.createElement('a');link.href=url;link.setAttribute('download',\"debris-analysis.\".concat(format));document.body.appendChild(link);link.click();link.remove();window.URL.revokeObjectURL(url);return{success:true};}catch(error){var _error$response7,_error$response7$data;console.error('Export failed:',error);throw new Error(((_error$response7=error.response)===null||_error$response7===void 0?void 0:(_error$response7$data=_error$response7.data)===null||_error$response7$data===void 0?void 0:_error$response7$data.error)||'Export failed');}};export const getMissionHistory=async()=>{try{const response=await api.get('/api/mission-history');return response.data;}catch(error){var _error$response8,_error$response8$data;console.error('Mission history failed:',error);throw new Error(((_error$response8=error.response)===null||_error$response8===void 0?void 0:(_error$response8$data=_error$response8.data)===null||_error$response8$data===void 0?void 0:_error$response8$data.error)||'Mission history failed');}};export const saveMission=async missionData=>{try{const response=await api.post('/api/save-mission',missionData);return response.data;}catch(error){var _error$response9,_error$response9$data;console.error('Save mission failed:',error);throw new Error(((_error$response9=error.response)===null||_error$response9===void 0?void 0:(_error$response9$data=_error$response9.data)===null||_error$response9$data===void 0?void 0:_error$response9$data.error)||'Save mission failed');}};export const loadMission=async missionId=>{try{const response=await api.get(\"/api/load-mission/\".concat(missionId));return response.data;}catch(error){var _error$response0,_error$response0$data;console.error('Load mission failed:',error);throw new Error(((_error$response0=error.response)===null||_error$response0===void 0?void 0:(_error$response0$data=_error$response0.data)===null||_error$response0$data===void 0?void 0:_error$response0$data.error)||'Load mission failed');}};export const downloadImages=async params=>{try{const response=await api.post('/api/download-images',params);return response.data;}catch(error){var _error$response1,_error$response1$data;console.error('Image download failed:',error);throw new Error(((_error$response1=error.response)===null||_error$response1===void 0?void 0:(_error$response1$data=_error$response1.data)===null||_error$response1$data===void 0?void 0:_error$response1$data.error)||'Image download failed');}};export const downloadFromUrl=async params=>{try{const response=await api.post('/api/download-from-url',params);return response.data;}catch(error){var _error$response10,_error$response10$dat;console.error('URL download failed:',error);throw new Error(((_error$response10=error.response)===null||_error$response10===void 0?void 0:(_error$response10$dat=_error$response10.data)===null||_error$response10$dat===void 0?void 0:_error$response10$dat.error)||'URL download failed');}};export const createSampleDataset=async params=>{try{const response=await api.post('/api/sample-dataset',params);return response.data;}catch(error){var _error$response11,_error$response11$dat;console.error('Sample dataset creation failed:',error);throw new Error(((_error$response11=error.response)===null||_error$response11===void 0?void 0:(_error$response11$dat=_error$response11.data)===null||_error$response11$dat===void 0?void 0:_error$response11$dat.error)||'Sample dataset creation failed');}};export const getDownloadedImages=async()=>{try{const response=await api.get('/api/downloaded-images');return response.data;}catch(error){var _error$response12,_error$response12$dat;console.error('Get downloaded images failed:',error);throw new Error(((_error$response12=error.response)===null||_error$response12===void 0?void 0:(_error$response12$dat=_error$response12.data)===null||_error$response12$dat===void 0?void 0:_error$response12$dat.error)||'Get downloaded images failed');}};export const downloadLargeDataset=async params=>{try{const response=await api.post('/api/download-large-dataset',params);return response.data;}catch(error){var _error$response13,_error$response13$dat;console.error('Large dataset download failed:',error);throw new Error(((_error$response13=error.response)===null||_error$response13===void 0?void 0:(_error$response13$dat=_error$response13.data)===null||_error$response13$dat===void 0?void 0:_error$response13$dat.error)||'Large dataset download failed');}};export const getDatasetInfo=async()=>{try{const response=await api.get('/api/dataset-info');return response.data;}catch(error){var _error$response14,_error$response14$dat;console.error('Get dataset info failed:',error);throw new Error(((_error$response14=error.response)===null||_error$response14===void 0?void 0:(_error$response14$dat=_error$response14.data)===null||_error$response14$dat===void 0?void 0:_error$response14$dat.error)||'Get dataset info failed');}};export const cleanupDatasets=async function(){let daysOld=arguments.length>0&&arguments[0]!==undefined?arguments[0]:30;try{const response=await api.post('/api/cleanup-datasets',{days_old:daysOld});return response.data;}catch(error){var _error$response15,_error$response15$dat;console.error('Dataset cleanup failed:',error);throw new Error(((_error$response15=error.response)===null||_error$response15===void 0?void 0:(_error$response15$dat=_error$response15.data)===null||_error$response15$dat===void 0?void 0:_error$response15$dat.error)||'Dataset cleanup failed');}};// Utility functions\nexport const formatFileSize=bytes=>{if(bytes===0)return'0 Bytes';const k=1024;const sizes=['Bytes','KB','MB','GB'];const i=Math.floor(Math.log(bytes)/Math.log(k));return parseFloat((bytes/Math.pow(k,i)).toFixed(2))+' '+sizes[i];};export const formatDuration=seconds=>{const hours=Math.floor(seconds/3600);const minutes=Math.floor(seconds%3600/60);const secs=Math.floor(seconds%60);if(hours>0){return\"\".concat(hours,\"h \").concat(minutes,\"m \").concat(secs,\"s\");}else if(minutes>0){return\"\".concat(minutes,\"m \").concat(secs,\"s\");}else{return\"\".concat(secs,\"s\");}};export const formatDistance=meters=>{if(meters>=1000){return\"\".concat((meters/1000).toFixed(2),\" km\");}else{return\"\".concat(meters.toFixed(1),\" m\");}};export const formatMass=kilograms=>{if(kilograms>=1000){return\"\".concat((kilograms/1000).toFixed(2),\" tons\");}else{return\"\".concat(kilograms.toFixed(1),\" kg\");}};export const formatTemperature=kelvin=>{const celsius=kelvin-273.15;return\"\".concat(celsius.toFixed(0),\"\\xB0C\");};export const formatEnergy=joules=>{if(joules>=1e6){return\"\".concat((joules/1e6).toFixed(2),\" MJ\");}else if(joules>=1e3){return\"\".concat((joules/1e3).toFixed(2),\" kJ\");}else{return\"\".concat(joules.toFixed(1),\" J\");}};export const downloadSampleImage=async imageType=>{try{const response=await api.post('/api/download-sample-image',{image_type:imageType});return response.data;}catch(error){var _error$response16,_error$response16$dat;console.error('Download sample image failed:',error);throw new Error(((_error$response16=error.response)===null||_error$response16===void 0?void 0:(_error$response16$dat=_error$response16.data)===null||_error$response16$dat===void 0?void 0:_error$response16$dat.error)||'Download sample image failed');}};export const processDownloadedImage=async imagePath=>{try{const response=await api.post('/api/process-downloaded-image',{image_path:imagePath});return response.data;}catch(error){var _error$response17,_error$response17$dat;console.error('Process downloaded image failed:',error);throw new Error(((_error$response17=error.response)===null||_error$response17===void 0?void 0:(_error$response17$dat=_error$response17.data)===null||_error$response17$dat===void 0?void 0:_error$response17$dat.error)||'Process downloaded image failed');}};export default api;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}