{"ast":null,"code":"var _jsxFileName = \"/Users/parthzanwar/Desktop/Space Apps/public/src/components/PathVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VisualizationContainer = styled.div`\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 15px;\n  padding: 25px;\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n`;\n_c = VisualizationContainer;\nconst VisualizationHeader = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 20px;\n`;\n_c2 = VisualizationHeader;\nconst VisualizationTitle = styled.h3`\n  font-size: 18px;\n  font-weight: 600;\n  color: #ffffff;\n  display: flex;\n  align-items: center;\n  gap: 10px;\n`;\n_c3 = VisualizationTitle;\nconst ViewControls = styled.div`\n  display: flex;\n  gap: 10px;\n`;\n_c4 = ViewControls;\nconst ViewButton = styled.button`\n  background: ${props => props.active ? 'rgba(0, 255, 255, 0.2)' : 'rgba(255, 255, 255, 0.1)'};\n  border: 1px solid ${props => props.active ? '#00ffff' : 'rgba(255, 255, 255, 0.3)'};\n  padding: 6px 12px;\n  border-radius: 15px;\n  color: #ffffff;\n  font-size: 11px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  \n  &:hover {\n    background: rgba(0, 255, 255, 0.2);\n    border-color: #00ffff;\n  }\n`;\n_c5 = ViewButton;\nconst CanvasContainer = styled.div`\n  position: relative;\n  width: 100%;\n  height: 400px;\n  background: rgba(0, 0, 0, 0.3);\n  border-radius: 10px;\n  overflow: hidden;\n  border: 1px solid rgba(255, 255, 255, 0.1);\n`;\n_c6 = CanvasContainer;\nconst Canvas = styled.canvas`\n  width: 100%;\n  height: 100%;\n  cursor: grab;\n  \n  &:active {\n    cursor: grabbing;\n  }\n`;\n_c7 = Canvas;\nconst PathInfo = styled.div`\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n  gap: 15px;\n`;\n_c8 = PathInfo;\nconst InfoCard = styled.div`\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 8px;\n  padding: 12px;\n  border: 1px solid rgba(255, 255, 255, 0.1);\n`;\n_c9 = InfoCard;\nconst InfoLabel = styled.div`\n  font-size: 11px;\n  color: rgba(255, 255, 255, 0.7);\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n  margin-bottom: 5px;\n`;\n_c0 = InfoLabel;\nconst InfoValue = styled.div`\n  font-size: 14px;\n  font-weight: 600;\n  color: #ffffff;\n`;\n_c1 = InfoValue;\nconst Legend = styled.div`\n  margin-top: 15px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 15px;\n`;\n_c10 = Legend;\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 12px;\n  color: rgba(255, 255, 255, 0.8);\n`;\n_c11 = LegendItem;\nconst LegendColor = styled.div`\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  background: ${props => props.color};\n`;\n_c12 = LegendColor;\nconst PathSteps = styled.div`\n  margin-top: 20px;\n  max-height: 200px;\n  overflow-y: auto;\n`;\n_c13 = PathSteps;\nconst StepItem = styled.div`\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 8px;\n  padding: 10px;\n  margin-bottom: 8px;\n  border-left: 3px solid ${props => props.color};\n  font-size: 12px;\n  color: rgba(255, 255, 255, 0.8);\n`;\n_c14 = StepItem;\nfunction PathVisualization({\n  pathData,\n  analysisResult\n}) {\n  _s();\n  var _pathData$path;\n  const canvasRef = useRef(null);\n  const [viewMode, setViewMode] = useState('3d');\n  const [camera, setCamera] = useState({\n    x: 0,\n    y: 0,\n    z: 1000\n  });\n  const [rotation, setRotation] = useState({\n    x: 0,\n    y: 0\n  });\n  const [showOnImage, setShowOnImage] = useState(false);\n  const [zoom, setZoom] = useState(1.0);\n  const [pan, setPan] = useState({\n    x: 0,\n    y: 0\n  });\n  const [isPanning, setIsPanning] = useState(false);\n  const [lastPanPos, setLastPanPos] = useState({\n    x: 0,\n    y: 0\n  });\n  const [isDragging, setIsDragging] = useState(false);\n  const [lastMousePos, setLastMousePos] = useState({\n    x: 0,\n    y: 0\n  });\n  useEffect(() => {\n    if (pathData && pathData.visualization) {\n      drawPath();\n    }\n  }, [pathData, viewMode, camera, rotation, showOnImage, zoom, pan]);\n  const drawPath = () => {\n    const canvas = canvasRef.current;\n    if (!canvas || !pathData.visualization) return;\n    const ctx = canvas.getContext('2d');\n    const rect = canvas.getBoundingClientRect();\n    const dpr = window.devicePixelRatio || 1;\n    canvas.width = rect.width * dpr;\n    canvas.height = rect.height * dpr;\n    ctx.scale(dpr, dpr);\n    canvas.style.width = rect.width + 'px';\n    canvas.style.height = rect.height + 'px';\n\n    // Clear canvas or draw background image\n    if (showOnImage && analysisResult && analysisResult.image_url) {\n      // Draw the original image as background with zoom and pan\n      const img = new Image();\n      img.onload = () => {\n        // Calculate image dimensions with zoom\n        const imgWidth = img.width * zoom;\n        const imgHeight = img.height * zoom;\n\n        // Calculate image position with pan\n        const imgX = (rect.width - imgWidth) / 2 + pan.x;\n        const imgY = (rect.height - imgHeight) / 2 + pan.y;\n\n        // Clear canvas\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\n        ctx.fillRect(0, 0, rect.width, rect.height);\n\n        // Draw image with zoom and pan\n        ctx.drawImage(img, imgX, imgY, imgWidth, imgHeight);\n\n        // Draw path overlay with same zoom and pan\n        drawPathOverlay(ctx, rect, imgX, imgY, imgWidth, imgHeight);\n      };\n      img.src = analysisResult.image_url;\n      return;\n    } else {\n      // Clear canvas with background\n      ctx.fillStyle = viewMode === '3d' ? 'rgba(0, 0, 20, 0.3)' : 'rgba(0, 0, 0, 0.1)';\n      ctx.fillRect(0, 0, rect.width, rect.height);\n    }\n    drawPathOverlay(ctx, rect);\n  };\n  const drawPathOverlay = (ctx, rect, imgX = 0, imgY = 0, imgWidth = 0, imgHeight = 0) => {\n    const points = pathData.visualization.points;\n    const connections = pathData.visualization.connections;\n    const metadata = pathData.visualization.metadata || [];\n    if (!points || points.length === 0) return;\n\n    // Calculate bounds\n    const bounds = calculateBounds(points);\n    const scale = Math.min(rect.width, rect.height) / Math.max(bounds.width, bounds.height) * 0.8;\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n\n    // Project 3D points to 2D with view mode consideration\n    const projectedPoints = points.map(point => {\n      const [x, y, z] = point;\n      if (showOnImage && analysisResult && analysisResult.image_url) {\n        // When showing on image, map 3D coordinates to image space\n        // The path coordinates are in 3D space, but we need to map them to image pixels\n        // Use a simple projection that maps the 3D bounds to image coordinates\n\n        // Normalize the 3D coordinates to 0-1 range\n        const normalizedX = bounds.width > 0 ? (x - bounds.minX) / bounds.width : 0.5;\n        const normalizedY = bounds.height > 0 ? (y - bounds.minY) / bounds.height : 0.5;\n\n        // Map to image coordinates\n        const imageX = imgX + normalizedX * imgWidth;\n        const imageY = imgY + normalizedY * imgHeight;\n        return {\n          x: imageX,\n          y: imageY,\n          z: 0\n        };\n      }\n      if (viewMode === '2d') {\n        // Simple 2D projection (ignore Z) with zoom and pan\n        const projectedX = centerX + (x - bounds.centerX) * scale * zoom + pan.x;\n        const projectedY = centerY + (y - bounds.centerY) * scale * zoom + pan.y;\n        return {\n          x: projectedX,\n          y: projectedY,\n          z: 0\n        };\n      } else {\n        // 3D perspective projection with rotation (improved) and zoom\n        const cosX = Math.cos(rotation.x * 0.5);\n        const sinX = Math.sin(rotation.x * 0.5);\n        const cosY = Math.cos(rotation.y * 0.5);\n        const sinY = Math.sin(rotation.y * 0.5);\n\n        // Apply rotation with better scaling\n        const rotatedX = x * cosY - z * sinY;\n        const rotatedY = y * cosX + (x * sinY + z * cosY) * sinX;\n        const rotatedZ = (x * sinY + z * cosY) * cosX - y * sinX;\n\n        // Perspective projection with better depth handling and zoom\n        const perspective = 1000;\n        const depth = Math.max(1, rotatedZ + perspective);\n        const projectedX = centerX + rotatedX / depth * scale * 200 * zoom + pan.x;\n        const projectedY = centerY + rotatedY / depth * scale * 200 * zoom + pan.y;\n        return {\n          x: projectedX,\n          y: projectedY,\n          z: rotatedZ\n        };\n      }\n    });\n\n    // Draw connections\n    ctx.strokeStyle = 'rgba(0, 255, 255, 0.6)';\n    ctx.lineWidth = 2;\n    ctx.setLineDash([5, 5]);\n    for (const connection of connections) {\n      const [startIdx, endIdx] = connection;\n      if (startIdx < projectedPoints.length && endIdx < projectedPoints.length) {\n        const start = projectedPoints[startIdx];\n        const end = projectedPoints[endIdx];\n        ctx.beginPath();\n        ctx.moveTo(start.x, start.y);\n        ctx.lineTo(end.x, end.y);\n        ctx.stroke();\n      }\n    }\n\n    // Reset line dash\n    ctx.setLineDash([]);\n\n    // Draw points\n    projectedPoints.forEach((point, index) => {\n      var _pathData$visualizati;\n      const isStart = index === 0;\n      const isEnd = index === projectedPoints.length - 1;\n      const metadata = (_pathData$visualizati = pathData.visualization.metadata) === null || _pathData$visualizati === void 0 ? void 0 : _pathData$visualizati[index - 1]; // -1 because start point has no metadata\n\n      let color, radius;\n      if (isStart) {\n        color = '#00ff00';\n        radius = 8;\n      } else if (isEnd && projectedPoints.length > 2) {\n        color = '#ff0000';\n        radius = 8;\n      } else if (metadata) {\n        color = metadata.feasible ? '#00ffff' : '#ffaa00';\n        radius = Math.max(4, Math.min(12, metadata.size * 2));\n      } else {\n        // Default for intermediate points without metadata\n        color = '#00ffff';\n        radius = 6;\n      }\n\n      // Draw point\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.arc(point.x, point.y, radius, 0, 2 * Math.PI);\n      ctx.fill();\n\n      // Draw border\n      ctx.strokeStyle = 'rgba(255, 255, 255, 0.8)';\n      ctx.lineWidth = 1;\n      ctx.stroke();\n\n      // Draw labels\n      if (metadata || isStart || isEnd) {\n        ctx.fillStyle = '#ffffff';\n        ctx.font = '10px Inter, sans-serif';\n        ctx.textAlign = 'center';\n        const label = isStart ? 'START' : isEnd && projectedPoints.length > 2 ? 'END' : metadata ? `D${metadata.debris_id || index}` : `D${index}`;\n        ctx.fillText(label, point.x, point.y - radius - 10);\n      }\n    });\n\n    // Draw coordinate axes (only in 3D mode and not on image)\n    if (viewMode === '3d' && !showOnImage) {\n      drawAxes(ctx, centerX, centerY, scale);\n    }\n  };\n  const calculateBounds = points => {\n    if (points.length === 0) return {\n      minX: 0,\n      maxX: 0,\n      minY: 0,\n      maxY: 0,\n      centerX: 0,\n      centerY: 0,\n      width: 0,\n      height: 0\n    };\n    const xCoords = points.map(p => p[0]);\n    const yCoords = points.map(p => p[1]);\n    const minX = Math.min(...xCoords);\n    const maxX = Math.max(...xCoords);\n    const minY = Math.min(...yCoords);\n    const maxY = Math.max(...yCoords);\n    return {\n      minX,\n      maxX,\n      minY,\n      maxY,\n      centerX: (minX + maxX) / 2,\n      centerY: (minY + maxY) / 2,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n  };\n  const drawAxes = (ctx, centerX, centerY, scale) => {\n    ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';\n    ctx.lineWidth = 1;\n\n    // X axis\n    ctx.beginPath();\n    ctx.moveTo(centerX - 50, centerY);\n    ctx.lineTo(centerX + 50, centerY);\n    ctx.stroke();\n\n    // Y axis\n    ctx.beginPath();\n    ctx.moveTo(centerX, centerY - 50);\n    ctx.lineTo(centerX, centerY + 50);\n    ctx.stroke();\n\n    // Labels\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.6)';\n    ctx.font = '8px Inter, sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('X', centerX + 55, centerY + 3);\n    ctx.fillText('Y', centerX + 3, centerY - 55);\n  };\n  const handleCanvasMouseMove = e => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    if (isPanning) {\n      // Handle panning\n      const deltaX = e.clientX - lastPanPos.x;\n      const deltaY = e.clientY - lastPanPos.y;\n      setPan(prev => ({\n        x: prev.x + deltaX,\n        y: prev.y + deltaY\n      }));\n      setLastPanPos({\n        x: e.clientX,\n        y: e.clientY\n      });\n    } else if (viewMode === '3d' && !showOnImage) {\n      // Handle 3D rotation\n      const x = (e.clientX - rect.left) / rect.width;\n      const y = (e.clientY - rect.top) / rect.height;\n      setRotation({\n        x: (y - 0.5) * Math.PI,\n        y: (x - 0.5) * Math.PI\n      });\n    }\n  };\n  const handleCanvasMouseDown = e => {\n    if (e.button === 1 || e.button === 0 && e.ctrlKey) {\n      // Middle mouse or Ctrl+left click for panning\n      setIsPanning(true);\n      setLastPanPos({\n        x: e.clientX,\n        y: e.clientY\n      });\n      e.preventDefault();\n    } else if (e.button === 0 && viewMode === '3d' && !showOnImage) {\n      // Left click for 3D rotation\n      setIsDragging(true);\n      setLastMousePos({\n        x: e.clientX,\n        y: e.clientY\n      });\n    }\n  };\n  const handleCanvasMouseUp = () => {\n    setIsDragging(false);\n    setIsPanning(false);\n  };\n  const handleCanvasWheel = e => {\n    e.preventDefault();\n    const delta = e.deltaY > 0 ? 0.9 : 1.1;\n    setZoom(prev => Math.max(0.1, Math.min(10, prev * delta)));\n  };\n  const resetView = () => {\n    setZoom(1.0);\n    setPan({\n      x: 0,\n      y: 0\n    });\n    setRotation({\n      x: 0,\n      y: 0\n    });\n  };\n  if (!pathData || !pathData.visualization) {\n    return /*#__PURE__*/_jsxDEV(VisualizationContainer, {\n      children: [/*#__PURE__*/_jsxDEV(VisualizationHeader, {\n        children: /*#__PURE__*/_jsxDEV(VisualizationTitle, {\n          children: \"\\uD83D\\uDDFA\\uFE0F Path Visualization\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: 'center',\n          padding: '40px',\n          color: 'rgba(255, 255, 255, 0.5)'\n        },\n        children: \"No path data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 7\n    }, this);\n  }\n  const metrics = pathData.metrics || {};\n  return /*#__PURE__*/_jsxDEV(VisualizationContainer, {\n    children: [/*#__PURE__*/_jsxDEV(VisualizationHeader, {\n      children: [/*#__PURE__*/_jsxDEV(VisualizationTitle, {\n        children: \"\\uD83D\\uDDFA\\uFE0F Path Visualization\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ViewControls, {\n        children: [/*#__PURE__*/_jsxDEV(ViewButton, {\n          active: viewMode === '3d',\n          onClick: () => setViewMode('3d'),\n          children: \"3D View\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ViewButton, {\n          active: viewMode === '2d',\n          onClick: () => setViewMode('2d'),\n          children: \"2D View\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ViewButton, {\n          active: showOnImage,\n          onClick: () => setShowOnImage(!showOnImage),\n          children: \"\\uD83D\\uDCF8 On Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ViewButton, {\n          onClick: () => setZoom(prev => Math.min(10, prev * 1.2)),\n          title: \"Zoom In\",\n          children: \"\\uD83D\\uDD0D+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ViewButton, {\n          onClick: () => setZoom(prev => Math.max(0.1, prev * 0.8)),\n          title: \"Zoom Out\",\n          children: \"\\uD83D\\uDD0D-\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ViewButton, {\n          onClick: resetView,\n          title: \"Reset View\",\n          children: \"\\uD83C\\uDFE0 Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CanvasContainer, {\n      children: /*#__PURE__*/_jsxDEV(Canvas, {\n        ref: canvasRef,\n        onMouseMove: handleCanvasMouseMove,\n        onMouseDown: handleCanvasMouseDown,\n        onMouseUp: handleCanvasMouseUp,\n        onWheel: handleCanvasWheel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Legend, {\n      children: [/*#__PURE__*/_jsxDEV(LegendItem, {\n        children: [/*#__PURE__*/_jsxDEV(LegendColor, {\n          color: \"#00ff00\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Start Position\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LegendItem, {\n        children: [/*#__PURE__*/_jsxDEV(LegendColor, {\n          color: \"#00ffff\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Feasible Debris\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LegendItem, {\n        children: [/*#__PURE__*/_jsxDEV(LegendColor, {\n          color: \"#ffaa00\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Non-feasible\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LegendItem, {\n        children: [/*#__PURE__*/_jsxDEV(LegendColor, {\n          color: \"#ff0000\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"End Position\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LegendItem, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '12px',\n            height: '2px',\n            background: 'rgba(0, 255, 255, 0.6)',\n            margin: '5px 0'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Path Connection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 530,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LegendItem, {\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"\\uD83D\\uDD0D Zoom: \", Math.round(zoom * 100), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LegendItem, {\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Controls: Scroll=Zoom, Ctrl+Drag=Pan, Drag=Rotate(3D)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 9\n      }, this), showOnImage && /*#__PURE__*/_jsxDEV(LegendItem, {\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\uD83D\\uDCF8 Image Mode: Zoom and pan work with the image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PathInfo, {\n      children: [/*#__PURE__*/_jsxDEV(InfoCard, {\n        children: [/*#__PURE__*/_jsxDEV(InfoLabel, {\n          children: \"Path Length\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoValue, {\n          children: [pathData.path_length || 0, \" steps\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfoCard, {\n        children: [/*#__PURE__*/_jsxDEV(InfoLabel, {\n          children: \"Total Distance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoValue, {\n          children: metrics.total_distance ? `${(metrics.total_distance / 1000).toFixed(1)} km` : '0 km'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfoCard, {\n        children: [/*#__PURE__*/_jsxDEV(InfoLabel, {\n          children: \"Mission Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoValue, {\n          children: metrics.total_time ? `${(metrics.total_time / 3600).toFixed(1)} hours` : '0 hours'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfoCard, {\n        children: [/*#__PURE__*/_jsxDEV(InfoLabel, {\n          children: \"Fuel Required\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InfoValue, {\n          children: metrics.total_fuel ? `${metrics.total_fuel.toFixed(1)} kg` : '0 kg'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 545,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PathSteps, {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        style: {\n          color: '#ffffff',\n          marginBottom: '10px',\n          fontSize: '14px'\n        },\n        children: \"Path Steps:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 9\n      }, this), (_pathData$path = pathData.path) === null || _pathData$path === void 0 ? void 0 : _pathData$path.map((step, index) => /*#__PURE__*/_jsxDEV(StepItem, {\n        color: index === 0 ? '#00ff00' : index === pathData.path.length - 1 ? '#ff0000' : '#00ffff',\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [\"Step \", step.step, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 13\n        }, this), \" \", index === 0 ? 'Start' : `Debris ${step.debris_id}`, step.distance_from_previous && /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            float: 'right',\n            color: 'rgba(255, 255, 255, 0.6)'\n          },\n          children: [step.distance_from_previous.toFixed(1), \"m\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 567,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 458,\n    columnNumber: 5\n  }, this);\n}\n_s(PathVisualization, \"o75AxppYGDBW7o1ZNSveeBh+N2g=\");\n_c15 = PathVisualization;\nexport default PathVisualization;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c0, _c1, _c10, _c11, _c12, _c13, _c14, _c15;\n$RefreshReg$(_c, \"VisualizationContainer\");\n$RefreshReg$(_c2, \"VisualizationHeader\");\n$RefreshReg$(_c3, \"VisualizationTitle\");\n$RefreshReg$(_c4, \"ViewControls\");\n$RefreshReg$(_c5, \"ViewButton\");\n$RefreshReg$(_c6, \"CanvasContainer\");\n$RefreshReg$(_c7, \"Canvas\");\n$RefreshReg$(_c8, \"PathInfo\");\n$RefreshReg$(_c9, \"InfoCard\");\n$RefreshReg$(_c0, \"InfoLabel\");\n$RefreshReg$(_c1, \"InfoValue\");\n$RefreshReg$(_c10, \"Legend\");\n$RefreshReg$(_c11, \"LegendItem\");\n$RefreshReg$(_c12, \"LegendColor\");\n$RefreshReg$(_c13, \"PathSteps\");\n$RefreshReg$(_c14, \"StepItem\");\n$RefreshReg$(_c15, \"PathVisualization\");","map":{"version":3,"names":["React","useRef","useEffect","useState","styled","jsxDEV","_jsxDEV","VisualizationContainer","div","_c","VisualizationHeader","_c2","VisualizationTitle","h3","_c3","ViewControls","_c4","ViewButton","button","props","active","_c5","CanvasContainer","_c6","Canvas","canvas","_c7","PathInfo","_c8","InfoCard","_c9","InfoLabel","_c0","InfoValue","_c1","Legend","_c10","LegendItem","_c11","LegendColor","color","_c12","PathSteps","_c13","StepItem","_c14","PathVisualization","pathData","analysisResult","_s","_pathData$path","canvasRef","viewMode","setViewMode","camera","setCamera","x","y","z","rotation","setRotation","showOnImage","setShowOnImage","zoom","setZoom","pan","setPan","isPanning","setIsPanning","lastPanPos","setLastPanPos","isDragging","setIsDragging","lastMousePos","setLastMousePos","visualization","drawPath","current","ctx","getContext","rect","getBoundingClientRect","dpr","window","devicePixelRatio","width","height","scale","style","image_url","img","Image","onload","imgWidth","imgHeight","imgX","imgY","fillStyle","fillRect","drawImage","drawPathOverlay","src","points","connections","metadata","length","bounds","calculateBounds","Math","min","max","centerX","centerY","projectedPoints","map","point","normalizedX","minX","normalizedY","minY","imageX","imageY","projectedX","projectedY","cosX","cos","sinX","sin","cosY","sinY","rotatedX","rotatedY","rotatedZ","perspective","depth","strokeStyle","lineWidth","setLineDash","connection","startIdx","endIdx","start","end","beginPath","moveTo","lineTo","stroke","forEach","index","_pathData$visualizati","isStart","isEnd","radius","feasible","size","arc","PI","fill","font","textAlign","label","debris_id","fillText","drawAxes","maxX","maxY","xCoords","p","yCoords","handleCanvasMouseMove","e","deltaX","clientX","deltaY","clientY","prev","left","top","handleCanvasMouseDown","ctrlKey","preventDefault","handleCanvasMouseUp","handleCanvasWheel","delta","resetView","children","fileName","_jsxFileName","lineNumber","columnNumber","padding","metrics","onClick","title","ref","onMouseMove","onMouseDown","onMouseUp","onWheel","background","margin","round","path_length","total_distance","toFixed","total_time","total_fuel","marginBottom","fontSize","path","step","distance_from_previous","float","_c15","$RefreshReg$"],"sources":["/Users/parthzanwar/Desktop/Space Apps/public/src/components/PathVisualization.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nconst VisualizationContainer = styled.div`\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 15px;\n  padding: 25px;\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n`;\n\nconst VisualizationHeader = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 20px;\n`;\n\nconst VisualizationTitle = styled.h3`\n  font-size: 18px;\n  font-weight: 600;\n  color: #ffffff;\n  display: flex;\n  align-items: center;\n  gap: 10px;\n`;\n\nconst ViewControls = styled.div`\n  display: flex;\n  gap: 10px;\n`;\n\nconst ViewButton = styled.button`\n  background: ${props => props.active ? 'rgba(0, 255, 255, 0.2)' : 'rgba(255, 255, 255, 0.1)'};\n  border: 1px solid ${props => props.active ? '#00ffff' : 'rgba(255, 255, 255, 0.3)'};\n  padding: 6px 12px;\n  border-radius: 15px;\n  color: #ffffff;\n  font-size: 11px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  \n  &:hover {\n    background: rgba(0, 255, 255, 0.2);\n    border-color: #00ffff;\n  }\n`;\n\nconst CanvasContainer = styled.div`\n  position: relative;\n  width: 100%;\n  height: 400px;\n  background: rgba(0, 0, 0, 0.3);\n  border-radius: 10px;\n  overflow: hidden;\n  border: 1px solid rgba(255, 255, 255, 0.1);\n`;\n\nconst Canvas = styled.canvas`\n  width: 100%;\n  height: 100%;\n  cursor: grab;\n  \n  &:active {\n    cursor: grabbing;\n  }\n`;\n\nconst PathInfo = styled.div`\n  margin-top: 20px;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n  gap: 15px;\n`;\n\nconst InfoCard = styled.div`\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 8px;\n  padding: 12px;\n  border: 1px solid rgba(255, 255, 255, 0.1);\n`;\n\nconst InfoLabel = styled.div`\n  font-size: 11px;\n  color: rgba(255, 255, 255, 0.7);\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n  margin-bottom: 5px;\n`;\n\nconst InfoValue = styled.div`\n  font-size: 14px;\n  font-weight: 600;\n  color: #ffffff;\n`;\n\nconst Legend = styled.div`\n  margin-top: 15px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 15px;\n`;\n\nconst LegendItem = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  font-size: 12px;\n  color: rgba(255, 255, 255, 0.8);\n`;\n\nconst LegendColor = styled.div`\n  width: 12px;\n  height: 12px;\n  border-radius: 50%;\n  background: ${props => props.color};\n`;\n\nconst PathSteps = styled.div`\n  margin-top: 20px;\n  max-height: 200px;\n  overflow-y: auto;\n`;\n\nconst StepItem = styled.div`\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: 8px;\n  padding: 10px;\n  margin-bottom: 8px;\n  border-left: 3px solid ${props => props.color};\n  font-size: 12px;\n  color: rgba(255, 255, 255, 0.8);\n`;\n\nfunction PathVisualization({ pathData, analysisResult }) {\n  const canvasRef = useRef(null);\n  const [viewMode, setViewMode] = useState('3d');\n  const [camera, setCamera] = useState({ x: 0, y: 0, z: 1000 });\n  const [rotation, setRotation] = useState({ x: 0, y: 0 });\n  const [showOnImage, setShowOnImage] = useState(false);\n  const [zoom, setZoom] = useState(1.0);\n  const [pan, setPan] = useState({ x: 0, y: 0 });\n  const [isPanning, setIsPanning] = useState(false);\n  const [lastPanPos, setLastPanPos] = useState({ x: 0, y: 0 });\n  const [isDragging, setIsDragging] = useState(false);\n  const [lastMousePos, setLastMousePos] = useState({ x: 0, y: 0 });\n\n  useEffect(() => {\n    if (pathData && pathData.visualization) {\n      drawPath();\n    }\n  }, [pathData, viewMode, camera, rotation, showOnImage, zoom, pan]);\n\n  const drawPath = () => {\n    const canvas = canvasRef.current;\n    if (!canvas || !pathData.visualization) return;\n\n    const ctx = canvas.getContext('2d');\n    const rect = canvas.getBoundingClientRect();\n    const dpr = window.devicePixelRatio || 1;\n    canvas.width = rect.width * dpr;\n    canvas.height = rect.height * dpr;\n    ctx.scale(dpr, dpr);\n    canvas.style.width = rect.width + 'px';\n    canvas.style.height = rect.height + 'px';\n\n        // Clear canvas or draw background image\n        if (showOnImage && analysisResult && analysisResult.image_url) {\n          // Draw the original image as background with zoom and pan\n          const img = new Image();\n          img.onload = () => {\n            // Calculate image dimensions with zoom\n            const imgWidth = img.width * zoom;\n            const imgHeight = img.height * zoom;\n            \n            // Calculate image position with pan\n            const imgX = (rect.width - imgWidth) / 2 + pan.x;\n            const imgY = (rect.height - imgHeight) / 2 + pan.y;\n            \n            // Clear canvas\n            ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\n            ctx.fillRect(0, 0, rect.width, rect.height);\n            \n            // Draw image with zoom and pan\n            ctx.drawImage(img, imgX, imgY, imgWidth, imgHeight);\n            \n            // Draw path overlay with same zoom and pan\n            drawPathOverlay(ctx, rect, imgX, imgY, imgWidth, imgHeight);\n          };\n          img.src = analysisResult.image_url;\n          return;\n        } else {\n          // Clear canvas with background\n          ctx.fillStyle = viewMode === '3d' ? 'rgba(0, 0, 20, 0.3)' : 'rgba(0, 0, 0, 0.1)';\n          ctx.fillRect(0, 0, rect.width, rect.height);\n        }\n\n    drawPathOverlay(ctx, rect);\n  };\n\n  const drawPathOverlay = (ctx, rect, imgX = 0, imgY = 0, imgWidth = 0, imgHeight = 0) => {\n\n    const points = pathData.visualization.points;\n    const connections = pathData.visualization.connections;\n    const metadata = pathData.visualization.metadata || [];\n\n    if (!points || points.length === 0) return;\n\n    // Calculate bounds\n    const bounds = calculateBounds(points);\n    const scale = Math.min(rect.width, rect.height) / Math.max(bounds.width, bounds.height) * 0.8;\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n\n    // Project 3D points to 2D with view mode consideration\n    const projectedPoints = points.map(point => {\n      const [x, y, z] = point;\n      \n      if (showOnImage && analysisResult && analysisResult.image_url) {\n        // When showing on image, map 3D coordinates to image space\n        // The path coordinates are in 3D space, but we need to map them to image pixels\n        // Use a simple projection that maps the 3D bounds to image coordinates\n        \n        // Normalize the 3D coordinates to 0-1 range\n        const normalizedX = bounds.width > 0 ? (x - bounds.minX) / bounds.width : 0.5;\n        const normalizedY = bounds.height > 0 ? (y - bounds.minY) / bounds.height : 0.5;\n        \n        // Map to image coordinates\n        const imageX = imgX + normalizedX * imgWidth;\n        const imageY = imgY + normalizedY * imgHeight;\n        \n        return { x: imageX, y: imageY, z: 0 };\n      }\n      \n      if (viewMode === '2d') {\n        // Simple 2D projection (ignore Z) with zoom and pan\n        const projectedX = centerX + (x - bounds.centerX) * scale * zoom + pan.x;\n        const projectedY = centerY + (y - bounds.centerY) * scale * zoom + pan.y;\n        return { x: projectedX, y: projectedY, z: 0 };\n      } else {\n        // 3D perspective projection with rotation (improved) and zoom\n        const cosX = Math.cos(rotation.x * 0.5);\n        const sinX = Math.sin(rotation.x * 0.5);\n        const cosY = Math.cos(rotation.y * 0.5);\n        const sinY = Math.sin(rotation.y * 0.5);\n        \n        // Apply rotation with better scaling\n        const rotatedX = x * cosY - z * sinY;\n        const rotatedY = y * cosX + (x * sinY + z * cosY) * sinX;\n        const rotatedZ = (x * sinY + z * cosY) * cosX - y * sinX;\n        \n        // Perspective projection with better depth handling and zoom\n        const perspective = 1000;\n        const depth = Math.max(1, rotatedZ + perspective);\n        const projectedX = centerX + (rotatedX / depth) * scale * 200 * zoom + pan.x;\n        const projectedY = centerY + (rotatedY / depth) * scale * 200 * zoom + pan.y;\n        \n        return { x: projectedX, y: projectedY, z: rotatedZ };\n      }\n    });\n\n    // Draw connections\n    ctx.strokeStyle = 'rgba(0, 255, 255, 0.6)';\n    ctx.lineWidth = 2;\n    ctx.setLineDash([5, 5]);\n    \n    for (const connection of connections) {\n      const [startIdx, endIdx] = connection;\n      if (startIdx < projectedPoints.length && endIdx < projectedPoints.length) {\n        const start = projectedPoints[startIdx];\n        const end = projectedPoints[endIdx];\n        \n        ctx.beginPath();\n        ctx.moveTo(start.x, start.y);\n        ctx.lineTo(end.x, end.y);\n        ctx.stroke();\n      }\n    }\n\n    // Reset line dash\n    ctx.setLineDash([]);\n\n    // Draw points\n    projectedPoints.forEach((point, index) => {\n      const isStart = index === 0;\n      const isEnd = index === projectedPoints.length - 1;\n      const metadata = pathData.visualization.metadata?.[index - 1]; // -1 because start point has no metadata\n      \n\n      let color, radius;\n      \n      if (isStart) {\n        color = '#00ff00';\n        radius = 8;\n      } else if (isEnd && projectedPoints.length > 2) {\n        color = '#ff0000';\n        radius = 8;\n      } else if (metadata) {\n        color = metadata.feasible ? '#00ffff' : '#ffaa00';\n        radius = Math.max(4, Math.min(12, metadata.size * 2));\n      } else {\n        // Default for intermediate points without metadata\n        color = '#00ffff';\n        radius = 6;\n      }\n\n      // Draw point\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.arc(point.x, point.y, radius, 0, 2 * Math.PI);\n      ctx.fill();\n\n      // Draw border\n      ctx.strokeStyle = 'rgba(255, 255, 255, 0.8)';\n      ctx.lineWidth = 1;\n      ctx.stroke();\n\n      // Draw labels\n      if (metadata || isStart || isEnd) {\n        ctx.fillStyle = '#ffffff';\n        ctx.font = '10px Inter, sans-serif';\n        ctx.textAlign = 'center';\n        \n        const label = isStart ? 'START' : \n                     (isEnd && projectedPoints.length > 2) ? 'END' : \n                     metadata ? `D${metadata.debris_id || index}` :\n                     `D${index}`;\n        \n        ctx.fillText(label, point.x, point.y - radius - 10);\n      }\n    });\n\n    // Draw coordinate axes (only in 3D mode and not on image)\n    if (viewMode === '3d' && !showOnImage) {\n      drawAxes(ctx, centerX, centerY, scale);\n    }\n  };\n\n  const calculateBounds = (points) => {\n    if (points.length === 0) return { minX: 0, maxX: 0, minY: 0, maxY: 0, centerX: 0, centerY: 0, width: 0, height: 0 };\n\n    const xCoords = points.map(p => p[0]);\n    const yCoords = points.map(p => p[1]);\n    \n    const minX = Math.min(...xCoords);\n    const maxX = Math.max(...xCoords);\n    const minY = Math.min(...yCoords);\n    const maxY = Math.max(...yCoords);\n    \n    return {\n      minX, maxX, minY, maxY,\n      centerX: (minX + maxX) / 2,\n      centerY: (minY + maxY) / 2,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n  };\n\n  const drawAxes = (ctx, centerX, centerY, scale) => {\n    ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';\n    ctx.lineWidth = 1;\n    \n    // X axis\n    ctx.beginPath();\n    ctx.moveTo(centerX - 50, centerY);\n    ctx.lineTo(centerX + 50, centerY);\n    ctx.stroke();\n    \n    // Y axis\n    ctx.beginPath();\n    ctx.moveTo(centerX, centerY - 50);\n    ctx.lineTo(centerX, centerY + 50);\n    ctx.stroke();\n    \n    // Labels\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.6)';\n    ctx.font = '8px Inter, sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('X', centerX + 55, centerY + 3);\n    ctx.fillText('Y', centerX + 3, centerY - 55);\n  };\n\n  const handleCanvasMouseMove = (e) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    \n    const rect = canvas.getBoundingClientRect();\n    \n    if (isPanning) {\n      // Handle panning\n      const deltaX = e.clientX - lastPanPos.x;\n      const deltaY = e.clientY - lastPanPos.y;\n      \n      setPan(prev => ({\n        x: prev.x + deltaX,\n        y: prev.y + deltaY\n      }));\n      \n      setLastPanPos({ x: e.clientX, y: e.clientY });\n    } else if (viewMode === '3d' && !showOnImage) {\n      // Handle 3D rotation\n      const x = (e.clientX - rect.left) / rect.width;\n      const y = (e.clientY - rect.top) / rect.height;\n      \n      setRotation({\n        x: (y - 0.5) * Math.PI,\n        y: (x - 0.5) * Math.PI\n      });\n    }\n  };\n\n  const handleCanvasMouseDown = (e) => {\n    if (e.button === 1 || (e.button === 0 && e.ctrlKey)) {\n      // Middle mouse or Ctrl+left click for panning\n      setIsPanning(true);\n      setLastPanPos({ x: e.clientX, y: e.clientY });\n      e.preventDefault();\n    } else if (e.button === 0 && viewMode === '3d' && !showOnImage) {\n      // Left click for 3D rotation\n      setIsDragging(true);\n      setLastMousePos({ x: e.clientX, y: e.clientY });\n    }\n  };\n\n  const handleCanvasMouseUp = () => {\n    setIsDragging(false);\n    setIsPanning(false);\n  };\n\n  const handleCanvasWheel = (e) => {\n    e.preventDefault();\n    const delta = e.deltaY > 0 ? 0.9 : 1.1;\n    setZoom(prev => Math.max(0.1, Math.min(10, prev * delta)));\n  };\n\n  const resetView = () => {\n    setZoom(1.0);\n    setPan({ x: 0, y: 0 });\n    setRotation({ x: 0, y: 0 });\n  };\n\n  if (!pathData || !pathData.visualization) {\n    return (\n      <VisualizationContainer>\n        <VisualizationHeader>\n          <VisualizationTitle>🗺️ Path Visualization</VisualizationTitle>\n        </VisualizationHeader>\n        <div style={{ textAlign: 'center', padding: '40px', color: 'rgba(255, 255, 255, 0.5)' }}>\n          No path data available\n        </div>\n      </VisualizationContainer>\n    );\n  }\n\n  const metrics = pathData.metrics || {};\n\n  return (\n    <VisualizationContainer>\n      <VisualizationHeader>\n        <VisualizationTitle>🗺️ Path Visualization</VisualizationTitle>\n        <ViewControls>\n          <ViewButton \n            active={viewMode === '3d'} \n            onClick={() => setViewMode('3d')}\n          >\n            3D View\n          </ViewButton>\n          <ViewButton \n            active={viewMode === '2d'} \n            onClick={() => setViewMode('2d')}\n          >\n            2D View\n          </ViewButton>\n          <ViewButton \n            active={showOnImage} \n            onClick={() => setShowOnImage(!showOnImage)}\n          >\n            📸 On Image\n          </ViewButton>\n          <ViewButton \n            onClick={() => setZoom(prev => Math.min(10, prev * 1.2))}\n            title=\"Zoom In\"\n          >\n            🔍+\n          </ViewButton>\n          <ViewButton \n            onClick={() => setZoom(prev => Math.max(0.1, prev * 0.8))}\n            title=\"Zoom Out\"\n          >\n            🔍-\n          </ViewButton>\n          <ViewButton \n            onClick={resetView}\n            title=\"Reset View\"\n          >\n            🏠 Reset\n          </ViewButton>\n        </ViewControls>\n      </VisualizationHeader>\n\n      <CanvasContainer>\n        <Canvas\n          ref={canvasRef}\n          onMouseMove={handleCanvasMouseMove}\n          onMouseDown={handleCanvasMouseDown}\n          onMouseUp={handleCanvasMouseUp}\n          onWheel={handleCanvasWheel}\n        />\n      </CanvasContainer>\n\n      <Legend>\n        <LegendItem>\n          <LegendColor color=\"#00ff00\" />\n          <span>Start Position</span>\n        </LegendItem>\n        <LegendItem>\n          <LegendColor color=\"#00ffff\" />\n          <span>Feasible Debris</span>\n        </LegendItem>\n        <LegendItem>\n          <LegendColor color=\"#ffaa00\" />\n          <span>Non-feasible</span>\n        </LegendItem>\n        <LegendItem>\n          <LegendColor color=\"#ff0000\" />\n          <span>End Position</span>\n        </LegendItem>\n        <LegendItem>\n          <div style={{ width: '12px', height: '2px', background: 'rgba(0, 255, 255, 0.6)', margin: '5px 0' }}></div>\n          <span>Path Connection</span>\n        </LegendItem>\n        <LegendItem>\n          <span>🔍 Zoom: {Math.round(zoom * 100)}%</span>\n        </LegendItem>\n        <LegendItem>\n          <span>Controls: Scroll=Zoom, Ctrl+Drag=Pan, Drag=Rotate(3D)</span>\n        </LegendItem>\n        {showOnImage && (\n          <LegendItem>\n            <span>📸 Image Mode: Zoom and pan work with the image</span>\n          </LegendItem>\n        )}\n      </Legend>\n\n      <PathInfo>\n        <InfoCard>\n          <InfoLabel>Path Length</InfoLabel>\n          <InfoValue>{pathData.path_length || 0} steps</InfoValue>\n        </InfoCard>\n        \n        <InfoCard>\n          <InfoLabel>Total Distance</InfoLabel>\n          <InfoValue>{metrics.total_distance ? `${(metrics.total_distance / 1000).toFixed(1)} km` : '0 km'}</InfoValue>\n        </InfoCard>\n        \n        <InfoCard>\n          <InfoLabel>Mission Time</InfoLabel>\n          <InfoValue>{metrics.total_time ? `${(metrics.total_time / 3600).toFixed(1)} hours` : '0 hours'}</InfoValue>\n        </InfoCard>\n        \n        <InfoCard>\n          <InfoLabel>Fuel Required</InfoLabel>\n          <InfoValue>{metrics.total_fuel ? `${metrics.total_fuel.toFixed(1)} kg` : '0 kg'}</InfoValue>\n        </InfoCard>\n      </PathInfo>\n\n      <PathSteps>\n        <h4 style={{ color: '#ffffff', marginBottom: '10px', fontSize: '14px' }}>\n          Path Steps:\n        </h4>\n        \n        {pathData.path?.map((step, index) => (\n          <StepItem \n            key={index}\n            color={index === 0 ? '#00ff00' : index === pathData.path.length - 1 ? '#ff0000' : '#00ffff'}\n          >\n            <strong>Step {step.step}:</strong> {index === 0 ? 'Start' : `Debris ${step.debris_id}`} \n            {step.distance_from_previous && (\n              <span style={{ float: 'right', color: 'rgba(255, 255, 255, 0.6)' }}>\n                {step.distance_from_previous.toFixed(1)}m\n              </span>\n            )}\n          </StepItem>\n        ))}\n      </PathSteps>\n    </VisualizationContainer>\n  );\n}\n\nexport default PathVisualization;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}