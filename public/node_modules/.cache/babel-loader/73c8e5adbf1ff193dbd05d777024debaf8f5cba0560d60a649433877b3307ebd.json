{"ast":null,"code":"import _objectSpread from\"/Users/parthzanwar/Desktop/Space Apps/public/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _taggedTemplateLiteral from\"/Users/parthzanwar/Desktop/Space Apps/public/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5,_templateObject6,_templateObject7,_templateObject8,_templateObject9,_templateObject0,_templateObject1;import React,{useState,useEffect,useRef,useCallback}from'react';import styled from'styled-components';import*as THREE from'three';import{OrbitControls}from'three/examples/jsm/controls/OrbitControls';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Container=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  width: 100%;\\n  height: 100vh;\\n  position: relative;\\n  background: #000;\\n  overflow: hidden;\\n\"])));const ControlPanel=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  position: absolute;\\n  top: 20px;\\n  left: 20px;\\n  background: rgba(0, 0, 0, 0.8);\\n  padding: 20px;\\n  border-radius: 10px;\\n  color: white;\\n  z-index: 100;\\n  min-width: 300px;\\n\"])));const ControlGroup=styled.div(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  margin-bottom: 15px;\\n\"])));const Label=styled.label(_templateObject4||(_templateObject4=_taggedTemplateLiteral([\"\\n  display: block;\\n  margin-bottom: 5px;\\n  font-size: 14px;\\n  color: #00d4ff;\\n\"])));const Button=styled.button(_templateObject5||(_templateObject5=_taggedTemplateLiteral([\"\\n  background: linear-gradient(135deg, #00d4ff 0%, #0099cc 100%);\\n  color: white;\\n  border: none;\\n  padding: 10px 20px;\\n  border-radius: 5px;\\n  cursor: pointer;\\n  margin-right: 10px;\\n  margin-bottom: 10px;\\n  font-size: 12px;\\n  transition: all 0.3s ease;\\n\\n  &:hover {\\n    transform: translateY(-2px);\\n    box-shadow: 0 5px 15px rgba(0, 212, 255, 0.4);\\n  }\\n\\n  &:disabled {\\n    background: rgba(255, 255, 255, 0.1);\\n    cursor: not-allowed;\\n    transform: none;\\n  }\\n\"])));const Slider=styled.input(_templateObject6||(_templateObject6=_taggedTemplateLiteral([\"\\n  width: 100%;\\n  margin: 10px 0;\\n\"])));const InfoPanel=styled.div(_templateObject7||(_templateObject7=_taggedTemplateLiteral([\"\\n  position: absolute;\\n  top: 20px;\\n  right: 20px;\\n  background: rgba(0, 0, 0, 0.8);\\n  padding: 20px;\\n  border-radius: 10px;\\n  color: white;\\n  z-index: 100;\\n  min-width: 250px;\\n\"])));const Metric=styled.div(_templateObject8||(_templateObject8=_taggedTemplateLiteral([\"\\n  display: flex;\\n  justify-content: space-between;\\n  margin-bottom: 10px;\\n  font-size: 14px;\\n\"])));const MetricLabel=styled.span(_templateObject9||(_templateObject9=_taggedTemplateLiteral([\"\\n  color: #00d4ff;\\n\"])));const MetricValue=styled.span(_templateObject0||(_templateObject0=_taggedTemplateLiteral([\"\\n  color: white;\\n  font-weight: bold;\\n\"])));const StatusIndicator=styled.div(_templateObject1||(_templateObject1=_taggedTemplateLiteral([\"\\n  position: absolute;\\n  bottom: 20px;\\n  left: 20px;\\n  background: rgba(0, 0, 0, 0.8);\\n  padding: 15px;\\n  border-radius: 10px;\\n  color: white;\\n  z-index: 100;\\n\"])));const ORCAVisualization=()=>{const mountRef=useRef(null);const sceneRef=useRef(null);const rendererRef=useRef(null);const controlsRef=useRef(null);const animationRef=useRef(null);const[debrisData,setDebrisData]=useState(null);const[missionData,setMissionData]=useState(null);const[isPlaying,setIsPlaying]=useState(false);const[currentTime,setCurrentTime]=useState(0);const[selectedDebris,setSelectedDebris]=useState(null);const[viewMode,setViewMode]=useState('earth');const[metrics,setMetrics]=useState({totalDebris:0,orcaFeasible:0,materialsRecovered:0,partsManufactured:0,costSavings:0});useEffect(()=>{const initializeScene=()=>{if(!mountRef.current)return;// Scene setup\nconst scene=new THREE.Scene();scene.background=new THREE.Color(0x000011);// Camera setup\nconst camera=new THREE.PerspectiveCamera(75,mountRef.current.clientWidth/mountRef.current.clientHeight,0.1,10000);camera.position.set(0,0,1000);// Renderer setup\nconst renderer=new THREE.WebGLRenderer({antialias:true});renderer.setSize(mountRef.current.clientWidth,mountRef.current.clientHeight);renderer.shadowMap.enabled=true;renderer.shadowMap.type=THREE.PCFSoftShadowMap;mountRef.current.appendChild(renderer.domElement);// Controls\nconst controls=new OrbitControls(camera,renderer.domElement);controls.enableDamping=true;controls.dampingFactor=0.05;// Lighting\nconst ambientLight=new THREE.AmbientLight(0x404040,0.6);scene.add(ambientLight);const directionalLight=new THREE.DirectionalLight(0xffffff,0.8);directionalLight.position.set(1000,1000,1000);directionalLight.castShadow=true;scene.add(directionalLight);// Earth\nconst earthGeometry=new THREE.SphereGeometry(100,64,64);const earthMaterial=new THREE.MeshPhongMaterial({color:0x2563eb,shininess:0.1});const earth=new THREE.Mesh(earthGeometry,earthMaterial);earth.receiveShadow=true;scene.add(earth);// Atmosphere\nconst atmosphereGeometry=new THREE.SphereGeometry(105,32,32);const atmosphereMaterial=new THREE.MeshPhongMaterial({color:0x3b82f6,transparent:true,opacity:0.3});const atmosphere=new THREE.Mesh(atmosphereGeometry,atmosphereMaterial);scene.add(atmosphere);// Clouds\nconst cloudGeometry=new THREE.SphereGeometry(102,32,32);const cloudMaterial=new THREE.MeshPhongMaterial({color:0xffffff,transparent:true,opacity:0.4});const clouds=new THREE.Mesh(cloudGeometry,cloudMaterial);scene.add(clouds);sceneRef.current=scene;rendererRef.current=renderer;controlsRef.current=controls;animate();};loadData();initializeScene();return()=>{if(animationRef.current){cancelAnimationFrame(animationRef.current);}if(rendererRef.current){rendererRef.current.dispose();}};},[animate]);const loadData=async()=>{try{var _missionData$parts_ma,_missionData$economic;// Load orbital debris data\nconst debrisResponse=await fetch('/api/orbital-debris-data');const debrisData=await debrisResponse.json();setDebrisData(debrisData);// Load mission data\nconst missionResponse=await fetch('/api/orca-mission-data');const missionData=await missionResponse.json();setMissionData(missionData);// Update metrics\nsetMetrics({totalDebris:debrisData.metadata.total_objects,orcaFeasible:debrisData.debris_objects.filter(d=>d.feasible).length,materialsRecovered:missionData.materials_recovered||0,partsManufactured:((_missionData$parts_ma=missionData.parts_manufactured)===null||_missionData$parts_ma===void 0?void 0:_missionData$parts_ma.length)||0,costSavings:((_missionData$economic=missionData.economic_impact)===null||_missionData$economic===void 0?void 0:_missionData$economic.net_benefit_usd)||0});}catch(error){console.error('Error loading data:',error);}};// const createEarth = (scene) => {\n//   // Earth geometry\n//   const earthGeometry = new THREE.SphereGeometry(100, 64, 64);\n//   // Earth material with texture\n//   const earthMaterial = new THREE.MeshPhongMaterial({\n//     color: 0x2563eb,\n//     shininess: 100\n//   });\n//   const earth = new THREE.Mesh(earthGeometry, earthMaterial);\n//   scene.add(earth);\n//   // Add atmosphere\n//   const atmosphereGeometry = new THREE.SphereGeometry(105, 32, 32);\n//   const atmosphereMaterial = new THREE.MeshPhongMaterial({\n//     color: 0x00d4ff,\n//     transparent: true,\n//     opacity: 0.1\n//   });\n//   const atmosphere = new THREE.Mesh(atmosphereGeometry, atmosphereMaterial);\n//   scene.add(atmosphere);\n//   // Add clouds\n//   const cloudGeometry = new THREE.SphereGeometry(102, 32, 32);\n//   const cloudMaterial = new THREE.MeshPhongMaterial({\n//     color: 0xffffff,\n//     transparent: true,\n//     opacity: 0.3\n//   });\n//   const clouds = new THREE.Mesh(cloudGeometry, cloudMaterial);\n//   scene.add(clouds);\n// };\n// const createDebrisObjects = (scene, debrisData) => {\n//   if (!debrisData) return;\n//   const debrisGroup = new THREE.Group();\n//   debrisData.debris_objects.forEach((debris, index) => {\n//     // Create debris geometry based on size\n//     const size = Math.max(0.5, Math.min(5, debris.size / 10));\n//     const geometry = new THREE.SphereGeometry(size, 8, 8);\n//     // Create material based on feasibility\n//     const color = debris.feasible ? 0x00ff00 : 0xff0000;\n//     const material = new THREE.MeshBasicMaterial({ \n//       color: color,\n//       transparent: true,\n//       opacity: 0.8\n//     });\n//     const debrisMesh = new THREE.Mesh(geometry, material);\n//     // Position debris based on orbital parameters\n//     const altitude = debris.altitude + 100; // Earth radius + altitude\n//     const angle = (index / debrisData.debris_objects.length) * Math.PI * 2;\n//     debrisMesh.position.set(\n//       Math.cos(angle) * altitude,\n//       Math.sin(angle) * altitude * 0.3,\n//       Math.sin(angle) * altitude * 0.7\n//     );\n//     // Add user data for interaction\n//     debrisMesh.userData = {\n//       type: 'debris',\n//       debrisData: debris\n//     };\n//     debrisGroup.add(debrisMesh);\n//   });\n//   scene.add(debrisGroup);\n// };\n// const createORCADrone = (scene) => {\n//   // ORCA drone geometry\n//   const droneGeometry = new THREE.BoxGeometry(2, 1, 3);\n//   const droneMaterial = new THREE.MeshPhongMaterial({ color: 0xff6b6b });\n//   const drone = new THREE.Mesh(droneGeometry, droneMaterial);\n//   // Position drone\n//   drone.position.set(0, 0, 200);\n//   drone.userData = { type: 'orca_drone' };\n//   scene.add(drone);\n//   return drone;\n// };\nconst updateCameraPosition=()=>{var _sceneRef$current;const camera=(_sceneRef$current=sceneRef.current)===null||_sceneRef$current===void 0?void 0:_sceneRef$current.children.find(child=>child.type==='PerspectiveCamera');if(!camera)return;switch(viewMode){case'earth':// Earth view - close to Earth\ncamera.position.set(0,0,1000);break;case'satellite':// Satellite view - from above\ncamera.position.set(0,2000,0);break;case'data':// Data view - overview\ncamera.position.set(3000,3000,3000);break;default:camera.position.set(0,0,1000);}};const updateDebrisPositions=()=>{var _sceneRef$current2;// Update debris orbital positions\nconst debrisGroup=(_sceneRef$current2=sceneRef.current)===null||_sceneRef$current2===void 0?void 0:_sceneRef$current2.children.find(child=>child.type==='Group');if(debrisGroup){debrisGroup.children.forEach((debris,index)=>{if(debris.userData.type==='debris'){const time=Date.now()*0.0001;const angle=index/debrisGroup.children.length*Math.PI*2+time;const altitude=debris.userData.debrisData.altitude+100;debris.position.set(Math.cos(angle)*altitude,Math.sin(angle)*altitude*0.3,Math.sin(angle)*altitude*0.7);}});}};const animate=useCallback(()=>{animationRef.current=requestAnimationFrame(animate);if(controlsRef.current){controlsRef.current.update();}// Rotate Earth (only in Earth view)\nif(viewMode==='earth'){var _sceneRef$current3;const earth=(_sceneRef$current3=sceneRef.current)===null||_sceneRef$current3===void 0?void 0:_sceneRef$current3.children.find(child=>child.geometry.type==='SphereGeometry');if(earth){earth.rotation.y+=0.005;}}// Update debris positions\nif(debrisData){updateDebrisPositions();}// Update camera position based on view mode\nupdateCameraPosition();if(rendererRef.current&&sceneRef.current){rendererRef.current.render(sceneRef.current,sceneRef.current.children.find(child=>child.type==='PerspectiveCamera'));}},[viewMode,debrisData]);const handleDebrisClick=event=>{const mouse=new THREE.Vector2();mouse.x=event.clientX/window.innerWidth*2-1;mouse.y=-(event.clientY/window.innerHeight)*2+1;const raycaster=new THREE.Raycaster();raycaster.setFromCamera(mouse,sceneRef.current.children.find(child=>child.type==='PerspectiveCamera'));const intersects=raycaster.intersectObjects(sceneRef.current.children,true);if(intersects.length>0){const intersected=intersects[0].object;if(intersected.userData.type==='debris'){setSelectedDebris(intersected.userData.debrisData);}}};const startMission=()=>{setIsPlaying(true);// Start ORCA mission simulation\nif(missionData){simulateORCAMission();}};const simulateORCAMission=()=>{var _missionData$capture_;// Simulate ORCA capture mission\nlet step=0;const maxSteps=((_missionData$capture_=missionData.capture_results)===null||_missionData$capture_===void 0?void 0:_missionData$capture_.length)||10;const missionInterval=setInterval(()=>{if(step>=maxSteps){setIsPlaying(false);clearInterval(missionInterval);return;}// Update metrics\nconst capture=missionData.capture_results[step];if(capture.success){setMetrics(prev=>_objectSpread(_objectSpread({},prev),{},{materialsRecovered:prev.materialsRecovered+capture.mass_recovered_kg,costSavings:prev.costSavings+capture.value_recovered_usd}));}step++;setCurrentTime(step);},2000);};const resetMission=()=>{setIsPlaying(false);setCurrentTime(0);setMetrics({totalDebris:(debrisData===null||debrisData===void 0?void 0:debrisData.metadata.total_objects)||0,orcaFeasible:(debrisData===null||debrisData===void 0?void 0:debrisData.debris_objects.filter(d=>d.feasible).length)||0,materialsRecovered:0,partsManufactured:0,costSavings:0});};return/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsx(\"div\",{ref:mountRef,onClick:handleDebrisClick}),/*#__PURE__*/_jsxs(ControlPanel,{children:[/*#__PURE__*/_jsx(\"h3\",{style:{color:'#00d4ff',marginBottom:'20px'},children:\"\\uD83D\\uDEF0\\uFE0F ORCA Mission Control\"}),/*#__PURE__*/_jsxs(ControlGroup,{children:[/*#__PURE__*/_jsx(Label,{children:\"Mission Controls\"}),/*#__PURE__*/_jsx(Button,{onClick:startMission,disabled:isPlaying,children:\"\\uD83D\\uDE80 Start Mission\"}),/*#__PURE__*/_jsx(Button,{onClick:resetMission,disabled:isPlaying,children:\"\\uD83D\\uDD04 Reset\"})]}),/*#__PURE__*/_jsxs(ControlGroup,{children:[/*#__PURE__*/_jsx(Label,{children:\"Time Control\"}),/*#__PURE__*/_jsx(Slider,{type:\"range\",min:\"0\",max:\"100\",value:currentTime,onChange:e=>setCurrentTime(parseInt(e.target.value))})]}),/*#__PURE__*/_jsxs(ControlGroup,{children:[/*#__PURE__*/_jsx(Label,{children:\"View Options\"}),/*#__PURE__*/_jsx(Button,{onClick:()=>setViewMode('earth'),style:{background:viewMode==='earth'?'rgba(0, 255, 255, 0.3)':undefined},children:\"\\uD83C\\uDF0D Earth View\"}),/*#__PURE__*/_jsx(Button,{onClick:()=>setViewMode('satellite'),style:{background:viewMode==='satellite'?'rgba(0, 255, 255, 0.3)':undefined},children:\"\\uD83D\\uDEF0\\uFE0F Satellite View\"}),/*#__PURE__*/_jsx(Button,{onClick:()=>setViewMode('data'),style:{background:viewMode==='data'?'rgba(0, 255, 255, 0.3)':undefined},children:\"\\uD83D\\uDCCA Data View\"})]})]}),/*#__PURE__*/_jsxs(InfoPanel,{children:[/*#__PURE__*/_jsx(\"h3\",{style:{color:'#00d4ff',marginBottom:'15px'},children:\"\\uD83D\\uDCCA Mission Metrics\"}),/*#__PURE__*/_jsxs(Metric,{children:[/*#__PURE__*/_jsx(MetricLabel,{children:\"Total Debris:\"}),/*#__PURE__*/_jsx(MetricValue,{children:metrics.totalDebris.toLocaleString()})]}),/*#__PURE__*/_jsxs(Metric,{children:[/*#__PURE__*/_jsx(MetricLabel,{children:\"ORCA Feasible:\"}),/*#__PURE__*/_jsx(MetricValue,{children:metrics.orcaFeasible.toLocaleString()})]}),/*#__PURE__*/_jsxs(Metric,{children:[/*#__PURE__*/_jsx(MetricLabel,{children:\"Materials Recovered:\"}),/*#__PURE__*/_jsxs(MetricValue,{children:[metrics.materialsRecovered.toFixed(1),\" kg\"]})]}),/*#__PURE__*/_jsxs(Metric,{children:[/*#__PURE__*/_jsx(MetricLabel,{children:\"Parts Manufactured:\"}),/*#__PURE__*/_jsx(MetricValue,{children:metrics.partsManufactured})]}),/*#__PURE__*/_jsxs(Metric,{children:[/*#__PURE__*/_jsx(MetricLabel,{children:\"Cost Savings:\"}),/*#__PURE__*/_jsxs(MetricValue,{children:[\"$\",metrics.costSavings.toLocaleString()]})]}),selectedDebris&&/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:'20px',padding:'10px',background:'rgba(0, 212, 255, 0.1)',borderRadius:'5px'},children:[/*#__PURE__*/_jsx(\"h4\",{style:{color:'#00d4ff',marginBottom:'10px'},children:\"Selected Debris\"}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"ID:\"}),\" \",selectedDebris.id]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Material:\"}),\" \",selectedDebris.material]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Size:\"}),\" \",selectedDebris.size,\" cm\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Mass:\"}),\" \",selectedDebris.mass,\" kg\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Feasible:\"}),\" \",selectedDebris.feasible?'Yes':'No']}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Priority:\"}),\" \",(selectedDebris.priority*100).toFixed(1),\"%\"]})]})]}),/*#__PURE__*/_jsxs(StatusIndicator,{children:[/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',gap:'10px'},children:[/*#__PURE__*/_jsx(\"div\",{style:{width:'10px',height:'10px',borderRadius:'50%',backgroundColor:isPlaying?'#00ff00':'#ff0000'}}),/*#__PURE__*/_jsx(\"span\",{children:isPlaying?'Mission Active':'Mission Standby'})]}),/*#__PURE__*/_jsxs(\"div\",{style:{fontSize:'12px',marginTop:'5px'},children:[\"Step: \",currentTime,\" / 100\"]})]})]});};export default ORCAVisualization;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}