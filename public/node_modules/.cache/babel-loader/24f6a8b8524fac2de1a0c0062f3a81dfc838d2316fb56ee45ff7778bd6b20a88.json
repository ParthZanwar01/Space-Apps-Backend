{"ast":null,"code":"var _jsxFileName = \"/Users/parthzanwar/Desktop/Space Apps/public/src/components/ORCAVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  width: 100%;\n  height: 100vh;\n  position: relative;\n  background: #000;\n  overflow: hidden;\n`;\n_c = Container;\nconst ControlPanel = styled.div`\n  position: absolute;\n  top: 20px;\n  left: 20px;\n  background: rgba(0, 0, 0, 0.8);\n  padding: 20px;\n  border-radius: 10px;\n  color: white;\n  z-index: 100;\n  min-width: 300px;\n`;\n_c2 = ControlPanel;\nconst ControlGroup = styled.div`\n  margin-bottom: 15px;\n`;\n_c3 = ControlGroup;\nconst Label = styled.label`\n  display: block;\n  margin-bottom: 5px;\n  font-size: 14px;\n  color: #00d4ff;\n`;\n_c4 = Label;\nconst Button = styled.button`\n  background: linear-gradient(135deg, #00d4ff 0%, #0099cc 100%);\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  border-radius: 5px;\n  cursor: pointer;\n  margin-right: 10px;\n  margin-bottom: 10px;\n  font-size: 12px;\n  transition: all 0.3s ease;\n\n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 5px 15px rgba(0, 212, 255, 0.4);\n  }\n\n  &:disabled {\n    background: rgba(255, 255, 255, 0.1);\n    cursor: not-allowed;\n    transform: none;\n  }\n`;\n_c5 = Button;\nconst Slider = styled.input`\n  width: 100%;\n  margin: 10px 0;\n`;\n_c6 = Slider;\nconst InfoPanel = styled.div`\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  background: rgba(0, 0, 0, 0.8);\n  padding: 20px;\n  border-radius: 10px;\n  color: white;\n  z-index: 100;\n  min-width: 250px;\n`;\n_c7 = InfoPanel;\nconst Metric = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 10px;\n  font-size: 14px;\n`;\n_c8 = Metric;\nconst MetricLabel = styled.span`\n  color: #00d4ff;\n`;\n_c9 = MetricLabel;\nconst MetricValue = styled.span`\n  color: white;\n  font-weight: bold;\n`;\n_c0 = MetricValue;\nconst StatusIndicator = styled.div`\n  position: absolute;\n  bottom: 20px;\n  left: 20px;\n  background: rgba(0, 0, 0, 0.8);\n  padding: 15px;\n  border-radius: 10px;\n  color: white;\n  z-index: 100;\n`;\n_c1 = StatusIndicator;\nconst ORCAVisualization = () => {\n  _s();\n  const mountRef = useRef(null);\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const controlsRef = useRef(null);\n  const animationRef = useRef(null);\n  const [debrisData, setDebrisData] = useState(null);\n  const [missionData, setMissionData] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [selectedDebris, setSelectedDebris] = useState(null);\n  const [viewMode, setViewMode] = useState('earth');\n  const [metrics, setMetrics] = useState({\n    totalDebris: 0,\n    orcaFeasible: 0,\n    materialsRecovered: 0,\n    partsManufactured: 0,\n    costSavings: 0\n  });\n  useEffect(() => {\n    const initializeScene = () => {\n      if (!mountRef.current) return;\n\n      // Scene setup\n      const scene = new THREE.Scene();\n      scene.background = new THREE.Color(0x000011);\n\n      // Camera setup\n      const camera = new THREE.PerspectiveCamera(75, mountRef.current.clientWidth / mountRef.current.clientHeight, 0.1, 10000);\n      camera.position.set(0, 0, 1000);\n\n      // Renderer setup\n      const renderer = new THREE.WebGLRenderer({\n        antialias: true\n      });\n      renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n      renderer.shadowMap.enabled = true;\n      renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n      mountRef.current.appendChild(renderer.domElement);\n\n      // Controls\n      const controls = new OrbitControls(camera, renderer.domElement);\n      controls.enableDamping = true;\n      controls.dampingFactor = 0.05;\n\n      // Lighting\n      const ambientLight = new THREE.AmbientLight(0x404040, 0.6);\n      scene.add(ambientLight);\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n      directionalLight.position.set(1000, 1000, 1000);\n      directionalLight.castShadow = true;\n      scene.add(directionalLight);\n\n      // Earth\n      const earthGeometry = new THREE.SphereGeometry(100, 64, 64);\n      const earthMaterial = new THREE.MeshPhongMaterial({\n        color: 0x2563eb,\n        shininess: 0.1\n      });\n      const earth = new THREE.Mesh(earthGeometry, earthMaterial);\n      earth.receiveShadow = true;\n      scene.add(earth);\n\n      // Atmosphere\n      const atmosphereGeometry = new THREE.SphereGeometry(105, 32, 32);\n      const atmosphereMaterial = new THREE.MeshPhongMaterial({\n        color: 0x3b82f6,\n        transparent: true,\n        opacity: 0.3\n      });\n      const atmosphere = new THREE.Mesh(atmosphereGeometry, atmosphereMaterial);\n      scene.add(atmosphere);\n\n      // Clouds\n      const cloudGeometry = new THREE.SphereGeometry(102, 32, 32);\n      const cloudMaterial = new THREE.MeshPhongMaterial({\n        color: 0xffffff,\n        transparent: true,\n        opacity: 0.4\n      });\n      const clouds = new THREE.Mesh(cloudGeometry, cloudMaterial);\n      scene.add(clouds);\n      sceneRef.current = scene;\n      rendererRef.current = renderer;\n      controlsRef.current = controls;\n      animate();\n    };\n    loadData();\n    initializeScene();\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n      if (rendererRef.current) {\n        rendererRef.current.dispose();\n      }\n    };\n  }, []);\n  const loadData = async () => {\n    try {\n      var _missionData$parts_ma, _missionData$economic;\n      // Load orbital debris data\n      const debrisResponse = await fetch('/api/orbital-debris-data');\n      const debrisData = await debrisResponse.json();\n      setDebrisData(debrisData);\n\n      // Load mission data\n      const missionResponse = await fetch('/api/orca-mission-data');\n      const missionData = await missionResponse.json();\n      setMissionData(missionData);\n\n      // Update metrics\n      setMetrics({\n        totalDebris: debrisData.metadata.total_objects,\n        orcaFeasible: debrisData.debris_objects.filter(d => d.feasible).length,\n        materialsRecovered: missionData.materials_recovered || 0,\n        partsManufactured: ((_missionData$parts_ma = missionData.parts_manufactured) === null || _missionData$parts_ma === void 0 ? void 0 : _missionData$parts_ma.length) || 0,\n        costSavings: ((_missionData$economic = missionData.economic_impact) === null || _missionData$economic === void 0 ? void 0 : _missionData$economic.net_benefit_usd) || 0\n      });\n    } catch (error) {\n      console.error('Error loading data:', error);\n    }\n  };\n\n  // const createEarth = (scene) => {\n  //   // Earth geometry\n  //   const earthGeometry = new THREE.SphereGeometry(100, 64, 64);\n\n  //   // Earth material with texture\n  //   const earthMaterial = new THREE.MeshPhongMaterial({\n  //     color: 0x2563eb,\n  //     shininess: 100\n  //   });\n\n  //   const earth = new THREE.Mesh(earthGeometry, earthMaterial);\n  //   scene.add(earth);\n\n  //   // Add atmosphere\n  //   const atmosphereGeometry = new THREE.SphereGeometry(105, 32, 32);\n  //   const atmosphereMaterial = new THREE.MeshPhongMaterial({\n  //     color: 0x00d4ff,\n  //     transparent: true,\n  //     opacity: 0.1\n  //   });\n  //   const atmosphere = new THREE.Mesh(atmosphereGeometry, atmosphereMaterial);\n  //   scene.add(atmosphere);\n\n  //   // Add clouds\n  //   const cloudGeometry = new THREE.SphereGeometry(102, 32, 32);\n  //   const cloudMaterial = new THREE.MeshPhongMaterial({\n  //     color: 0xffffff,\n  //     transparent: true,\n  //     opacity: 0.3\n  //   });\n  //   const clouds = new THREE.Mesh(cloudGeometry, cloudMaterial);\n  //   scene.add(clouds);\n  // };\n\n  // const createDebrisObjects = (scene, debrisData) => {\n  //   if (!debrisData) return;\n\n  //   const debrisGroup = new THREE.Group();\n\n  //   debrisData.debris_objects.forEach((debris, index) => {\n  //     // Create debris geometry based on size\n  //     const size = Math.max(0.5, Math.min(5, debris.size / 10));\n  //     const geometry = new THREE.SphereGeometry(size, 8, 8);\n\n  //     // Create material based on feasibility\n  //     const color = debris.feasible ? 0x00ff00 : 0xff0000;\n  //     const material = new THREE.MeshBasicMaterial({ \n  //       color: color,\n  //       transparent: true,\n  //       opacity: 0.8\n  //     });\n\n  //     const debrisMesh = new THREE.Mesh(geometry, material);\n\n  //     // Position debris based on orbital parameters\n  //     const altitude = debris.altitude + 100; // Earth radius + altitude\n  //     const angle = (index / debrisData.debris_objects.length) * Math.PI * 2;\n\n  //     debrisMesh.position.set(\n  //       Math.cos(angle) * altitude,\n  //       Math.sin(angle) * altitude * 0.3,\n  //       Math.sin(angle) * altitude * 0.7\n  //     );\n\n  //     // Add user data for interaction\n  //     debrisMesh.userData = {\n  //       type: 'debris',\n  //       debrisData: debris\n  //     };\n\n  //     debrisGroup.add(debrisMesh);\n  //   });\n\n  //   scene.add(debrisGroup);\n  // };\n\n  // const createORCADrone = (scene) => {\n  //   // ORCA drone geometry\n  //   const droneGeometry = new THREE.BoxGeometry(2, 1, 3);\n  //   const droneMaterial = new THREE.MeshPhongMaterial({ color: 0xff6b6b });\n  //   const drone = new THREE.Mesh(droneGeometry, droneMaterial);\n\n  //   // Position drone\n  //   drone.position.set(0, 0, 200);\n  //   drone.userData = { type: 'orca_drone' };\n\n  //   scene.add(drone);\n  //   return drone;\n  // };\n\n  const animate = () => {\n    animationRef.current = requestAnimationFrame(animate);\n    if (controlsRef.current) {\n      controlsRef.current.update();\n    }\n\n    // Rotate Earth (only in Earth view)\n    if (viewMode === 'earth') {\n      var _sceneRef$current;\n      const earth = (_sceneRef$current = sceneRef.current) === null || _sceneRef$current === void 0 ? void 0 : _sceneRef$current.children.find(child => child.geometry.type === 'SphereGeometry');\n      if (earth) {\n        earth.rotation.y += 0.005;\n      }\n    }\n\n    // Update debris positions\n    if (debrisData) {\n      updateDebrisPositions();\n    }\n\n    // Update camera position based on view mode\n    updateCameraPosition();\n    if (rendererRef.current && sceneRef.current) {\n      rendererRef.current.render(sceneRef.current, sceneRef.current.children.find(child => child.type === 'PerspectiveCamera'));\n    }\n  };\n  const updateCameraPosition = () => {\n    var _sceneRef$current2;\n    const camera = (_sceneRef$current2 = sceneRef.current) === null || _sceneRef$current2 === void 0 ? void 0 : _sceneRef$current2.children.find(child => child.type === 'PerspectiveCamera');\n    if (!camera) return;\n    switch (viewMode) {\n      case 'earth':\n        // Earth view - close to Earth\n        camera.position.set(0, 0, 1000);\n        break;\n      case 'satellite':\n        // Satellite view - from above\n        camera.position.set(0, 2000, 0);\n        break;\n      case 'data':\n        // Data view - overview\n        camera.position.set(3000, 3000, 3000);\n        break;\n      default:\n        camera.position.set(0, 0, 1000);\n    }\n  };\n  const updateDebrisPositions = () => {\n    var _sceneRef$current3;\n    // Update debris orbital positions\n    const debrisGroup = (_sceneRef$current3 = sceneRef.current) === null || _sceneRef$current3 === void 0 ? void 0 : _sceneRef$current3.children.find(child => child.type === 'Group');\n    if (debrisGroup) {\n      debrisGroup.children.forEach((debris, index) => {\n        if (debris.userData.type === 'debris') {\n          const time = Date.now() * 0.0001;\n          const angle = index / debrisGroup.children.length * Math.PI * 2 + time;\n          const altitude = debris.userData.debrisData.altitude + 100;\n          debris.position.set(Math.cos(angle) * altitude, Math.sin(angle) * altitude * 0.3, Math.sin(angle) * altitude * 0.7);\n        }\n      });\n    }\n  };\n  const handleDebrisClick = event => {\n    const mouse = new THREE.Vector2();\n    mouse.x = event.clientX / window.innerWidth * 2 - 1;\n    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n    const raycaster = new THREE.Raycaster();\n    raycaster.setFromCamera(mouse, sceneRef.current.children.find(child => child.type === 'PerspectiveCamera'));\n    const intersects = raycaster.intersectObjects(sceneRef.current.children, true);\n    if (intersects.length > 0) {\n      const intersected = intersects[0].object;\n      if (intersected.userData.type === 'debris') {\n        setSelectedDebris(intersected.userData.debrisData);\n      }\n    }\n  };\n  const startMission = () => {\n    setIsPlaying(true);\n    // Start ORCA mission simulation\n    if (missionData) {\n      simulateORCAMission();\n    }\n  };\n  const simulateORCAMission = () => {\n    var _missionData$capture_;\n    // Simulate ORCA capture mission\n    let step = 0;\n    const maxSteps = ((_missionData$capture_ = missionData.capture_results) === null || _missionData$capture_ === void 0 ? void 0 : _missionData$capture_.length) || 10;\n    const missionInterval = setInterval(() => {\n      if (step >= maxSteps) {\n        setIsPlaying(false);\n        clearInterval(missionInterval);\n        return;\n      }\n\n      // Update metrics\n      const capture = missionData.capture_results[step];\n      if (capture.success) {\n        setMetrics(prev => ({\n          ...prev,\n          materialsRecovered: prev.materialsRecovered + capture.mass_recovered_kg,\n          costSavings: prev.costSavings + capture.value_recovered_usd\n        }));\n      }\n      step++;\n      setCurrentTime(step);\n    }, 2000);\n  };\n  const resetMission = () => {\n    setIsPlaying(false);\n    setCurrentTime(0);\n    setMetrics({\n      totalDebris: (debrisData === null || debrisData === void 0 ? void 0 : debrisData.metadata.total_objects) || 0,\n      orcaFeasible: (debrisData === null || debrisData === void 0 ? void 0 : debrisData.debris_objects.filter(d => d.feasible).length) || 0,\n      materialsRecovered: 0,\n      partsManufactured: 0,\n      costSavings: 0\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mountRef,\n      onClick: handleDebrisClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ControlPanel, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          color: '#00d4ff',\n          marginBottom: '20px'\n        },\n        children: \"\\uD83D\\uDEF0\\uFE0F ORCA Mission Control\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ControlGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          children: \"Mission Controls\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: startMission,\n          disabled: isPlaying,\n          children: \"\\uD83D\\uDE80 Start Mission\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: resetMission,\n          disabled: isPlaying,\n          children: \"\\uD83D\\uDD04 Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ControlGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          children: \"Time Control\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Slider, {\n          type: \"range\",\n          min: \"0\",\n          max: \"100\",\n          value: currentTime,\n          onChange: e => setCurrentTime(parseInt(e.target.value))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ControlGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          children: \"View Options\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setViewMode('earth'),\n          style: {\n            background: viewMode === 'earth' ? 'rgba(0, 255, 255, 0.3)' : undefined\n          },\n          children: \"\\uD83C\\uDF0D Earth View\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setViewMode('satellite'),\n          style: {\n            background: viewMode === 'satellite' ? 'rgba(0, 255, 255, 0.3)' : undefined\n          },\n          children: \"\\uD83D\\uDEF0\\uFE0F Satellite View\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setViewMode('data'),\n          style: {\n            background: viewMode === 'data' ? 'rgba(0, 255, 255, 0.3)' : undefined\n          },\n          children: \"\\uD83D\\uDCCA Data View\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfoPanel, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          color: '#00d4ff',\n          marginBottom: '15px'\n        },\n        children: \"\\uD83D\\uDCCA Mission Metrics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Metric, {\n        children: [/*#__PURE__*/_jsxDEV(MetricLabel, {\n          children: \"Total Debris:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MetricValue, {\n          children: metrics.totalDebris.toLocaleString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Metric, {\n        children: [/*#__PURE__*/_jsxDEV(MetricLabel, {\n          children: \"ORCA Feasible:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MetricValue, {\n          children: metrics.orcaFeasible.toLocaleString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Metric, {\n        children: [/*#__PURE__*/_jsxDEV(MetricLabel, {\n          children: \"Materials Recovered:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MetricValue, {\n          children: [metrics.materialsRecovered.toFixed(1), \" kg\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Metric, {\n        children: [/*#__PURE__*/_jsxDEV(MetricLabel, {\n          children: \"Parts Manufactured:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MetricValue, {\n          children: metrics.partsManufactured\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Metric, {\n        children: [/*#__PURE__*/_jsxDEV(MetricLabel, {\n          children: \"Cost Savings:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MetricValue, {\n          children: [\"$\", metrics.costSavings.toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 9\n      }, this), selectedDebris && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '20px',\n          padding: '10px',\n          background: 'rgba(0, 212, 255, 0.1)',\n          borderRadius: '5px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          style: {\n            color: '#00d4ff',\n            marginBottom: '10px'\n          },\n          children: \"Selected Debris\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"ID:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 548,\n            columnNumber: 16\n          }, this), \" \", selectedDebris.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Material:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 549,\n            columnNumber: 16\n          }, this), \" \", selectedDebris.material]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Size:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 550,\n            columnNumber: 16\n          }, this), \" \", selectedDebris.size, \" cm\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Mass:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 16\n          }, this), \" \", selectedDebris.mass, \" kg\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Feasible:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 16\n          }, this), \" \", selectedDebris.feasible ? 'Yes' : 'No']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Priority:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 553,\n            columnNumber: 16\n          }, this), \" \", (selectedDebris.priority * 100).toFixed(1), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 517,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StatusIndicator, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          gap: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '10px',\n            height: '10px',\n            borderRadius: '50%',\n            backgroundColor: isPlaying ? '#00ff00' : '#ff0000'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: isPlaying ? 'Mission Active' : 'Mission Standby'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 566,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: '12px',\n          marginTop: '5px'\n        },\n        children: [\"Step: \", currentTime, \" / 100\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 558,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 467,\n    columnNumber: 5\n  }, this);\n};\n_s(ORCAVisualization, \"a3v7Bc3jzfnkv48y8xgxLtCiAds=\");\n_c10 = ORCAVisualization;\nexport default ORCAVisualization;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c0, _c1, _c10;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"ControlPanel\");\n$RefreshReg$(_c3, \"ControlGroup\");\n$RefreshReg$(_c4, \"Label\");\n$RefreshReg$(_c5, \"Button\");\n$RefreshReg$(_c6, \"Slider\");\n$RefreshReg$(_c7, \"InfoPanel\");\n$RefreshReg$(_c8, \"Metric\");\n$RefreshReg$(_c9, \"MetricLabel\");\n$RefreshReg$(_c0, \"MetricValue\");\n$RefreshReg$(_c1, \"StatusIndicator\");\n$RefreshReg$(_c10, \"ORCAVisualization\");","map":{"version":3,"names":["React","useState","useEffect","useRef","styled","THREE","OrbitControls","jsxDEV","_jsxDEV","Container","div","_c","ControlPanel","_c2","ControlGroup","_c3","Label","label","_c4","Button","button","_c5","Slider","input","_c6","InfoPanel","_c7","Metric","_c8","MetricLabel","span","_c9","MetricValue","_c0","StatusIndicator","_c1","ORCAVisualization","_s","mountRef","sceneRef","rendererRef","controlsRef","animationRef","debrisData","setDebrisData","missionData","setMissionData","isPlaying","setIsPlaying","currentTime","setCurrentTime","selectedDebris","setSelectedDebris","viewMode","setViewMode","metrics","setMetrics","totalDebris","orcaFeasible","materialsRecovered","partsManufactured","costSavings","initializeScene","current","scene","Scene","background","Color","camera","PerspectiveCamera","clientWidth","clientHeight","position","set","renderer","WebGLRenderer","antialias","setSize","shadowMap","enabled","type","PCFSoftShadowMap","appendChild","domElement","controls","enableDamping","dampingFactor","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","castShadow","earthGeometry","SphereGeometry","earthMaterial","MeshPhongMaterial","color","shininess","earth","Mesh","receiveShadow","atmosphereGeometry","atmosphereMaterial","transparent","opacity","atmosphere","cloudGeometry","cloudMaterial","clouds","animate","loadData","cancelAnimationFrame","dispose","_missionData$parts_ma","_missionData$economic","debrisResponse","fetch","json","missionResponse","metadata","total_objects","debris_objects","filter","d","feasible","length","materials_recovered","parts_manufactured","economic_impact","net_benefit_usd","error","console","requestAnimationFrame","update","_sceneRef$current","children","find","child","geometry","rotation","y","updateDebrisPositions","updateCameraPosition","render","_sceneRef$current2","_sceneRef$current3","debrisGroup","forEach","debris","index","userData","time","Date","now","angle","Math","PI","altitude","cos","sin","handleDebrisClick","event","mouse","Vector2","x","clientX","window","innerWidth","clientY","innerHeight","raycaster","Raycaster","setFromCamera","intersects","intersectObjects","intersected","object","startMission","simulateORCAMission","_missionData$capture_","step","maxSteps","capture_results","missionInterval","setInterval","clearInterval","capture","success","prev","mass_recovered_kg","value_recovered_usd","resetMission","ref","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","marginBottom","disabled","min","max","value","onChange","e","parseInt","target","undefined","toLocaleString","toFixed","marginTop","padding","borderRadius","id","material","size","mass","priority","display","alignItems","gap","width","height","backgroundColor","fontSize","_c10","$RefreshReg$"],"sources":["/Users/parthzanwar/Desktop/Space Apps/public/src/components/ORCAVisualization.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nconst Container = styled.div`\n  width: 100%;\n  height: 100vh;\n  position: relative;\n  background: #000;\n  overflow: hidden;\n`;\n\nconst ControlPanel = styled.div`\n  position: absolute;\n  top: 20px;\n  left: 20px;\n  background: rgba(0, 0, 0, 0.8);\n  padding: 20px;\n  border-radius: 10px;\n  color: white;\n  z-index: 100;\n  min-width: 300px;\n`;\n\nconst ControlGroup = styled.div`\n  margin-bottom: 15px;\n`;\n\nconst Label = styled.label`\n  display: block;\n  margin-bottom: 5px;\n  font-size: 14px;\n  color: #00d4ff;\n`;\n\nconst Button = styled.button`\n  background: linear-gradient(135deg, #00d4ff 0%, #0099cc 100%);\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  border-radius: 5px;\n  cursor: pointer;\n  margin-right: 10px;\n  margin-bottom: 10px;\n  font-size: 12px;\n  transition: all 0.3s ease;\n\n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 5px 15px rgba(0, 212, 255, 0.4);\n  }\n\n  &:disabled {\n    background: rgba(255, 255, 255, 0.1);\n    cursor: not-allowed;\n    transform: none;\n  }\n`;\n\nconst Slider = styled.input`\n  width: 100%;\n  margin: 10px 0;\n`;\n\nconst InfoPanel = styled.div`\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  background: rgba(0, 0, 0, 0.8);\n  padding: 20px;\n  border-radius: 10px;\n  color: white;\n  z-index: 100;\n  min-width: 250px;\n`;\n\nconst Metric = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 10px;\n  font-size: 14px;\n`;\n\nconst MetricLabel = styled.span`\n  color: #00d4ff;\n`;\n\nconst MetricValue = styled.span`\n  color: white;\n  font-weight: bold;\n`;\n\nconst StatusIndicator = styled.div`\n  position: absolute;\n  bottom: 20px;\n  left: 20px;\n  background: rgba(0, 0, 0, 0.8);\n  padding: 15px;\n  border-radius: 10px;\n  color: white;\n  z-index: 100;\n`;\n\nconst ORCAVisualization = () => {\n  const mountRef = useRef(null);\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const controlsRef = useRef(null);\n  const animationRef = useRef(null);\n  \n  const [debrisData, setDebrisData] = useState(null);\n  const [missionData, setMissionData] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [selectedDebris, setSelectedDebris] = useState(null);\n  const [viewMode, setViewMode] = useState('earth');\n  const [metrics, setMetrics] = useState({\n    totalDebris: 0,\n    orcaFeasible: 0,\n    materialsRecovered: 0,\n    partsManufactured: 0,\n    costSavings: 0\n  });\n\n  useEffect(() => {\n    const initializeScene = () => {\n      if (!mountRef.current) return;\n\n      // Scene setup\n      const scene = new THREE.Scene();\n      scene.background = new THREE.Color(0x000011);\n\n      // Camera setup\n      const camera = new THREE.PerspectiveCamera(\n        75,\n        mountRef.current.clientWidth / mountRef.current.clientHeight,\n        0.1,\n        10000\n      );\n      camera.position.set(0, 0, 1000);\n\n      // Renderer setup\n      const renderer = new THREE.WebGLRenderer({ antialias: true });\n      renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n      renderer.shadowMap.enabled = true;\n      renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\n      mountRef.current.appendChild(renderer.domElement);\n\n      // Controls\n      const controls = new OrbitControls(camera, renderer.domElement);\n      controls.enableDamping = true;\n      controls.dampingFactor = 0.05;\n\n      // Lighting\n      const ambientLight = new THREE.AmbientLight(0x404040, 0.6);\n      scene.add(ambientLight);\n\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n      directionalLight.position.set(1000, 1000, 1000);\n      directionalLight.castShadow = true;\n      scene.add(directionalLight);\n\n      // Earth\n      const earthGeometry = new THREE.SphereGeometry(100, 64, 64);\n      const earthMaterial = new THREE.MeshPhongMaterial({\n        color: 0x2563eb,\n        shininess: 0.1\n      });\n      const earth = new THREE.Mesh(earthGeometry, earthMaterial);\n      earth.receiveShadow = true;\n      scene.add(earth);\n\n      // Atmosphere\n      const atmosphereGeometry = new THREE.SphereGeometry(105, 32, 32);\n      const atmosphereMaterial = new THREE.MeshPhongMaterial({\n        color: 0x3b82f6,\n        transparent: true,\n        opacity: 0.3\n      });\n      const atmosphere = new THREE.Mesh(atmosphereGeometry, atmosphereMaterial);\n      scene.add(atmosphere);\n\n      // Clouds\n      const cloudGeometry = new THREE.SphereGeometry(102, 32, 32);\n      const cloudMaterial = new THREE.MeshPhongMaterial({\n        color: 0xffffff,\n        transparent: true,\n        opacity: 0.4\n      });\n      const clouds = new THREE.Mesh(cloudGeometry, cloudMaterial);\n      scene.add(clouds);\n\n      sceneRef.current = scene;\n      rendererRef.current = renderer;\n      controlsRef.current = controls;\n\n      animate();\n    };\n\n    loadData();\n    initializeScene();\n    \n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n      if (rendererRef.current) {\n        rendererRef.current.dispose();\n      }\n    };\n  }, []);\n\n  const loadData = async () => {\n    try {\n      // Load orbital debris data\n      const debrisResponse = await fetch('/api/orbital-debris-data');\n      const debrisData = await debrisResponse.json();\n      setDebrisData(debrisData);\n\n      // Load mission data\n      const missionResponse = await fetch('/api/orca-mission-data');\n      const missionData = await missionResponse.json();\n      setMissionData(missionData);\n\n      // Update metrics\n      setMetrics({\n        totalDebris: debrisData.metadata.total_objects,\n        orcaFeasible: debrisData.debris_objects.filter(d => d.feasible).length,\n        materialsRecovered: missionData.materials_recovered || 0,\n        partsManufactured: missionData.parts_manufactured?.length || 0,\n        costSavings: missionData.economic_impact?.net_benefit_usd || 0\n      });\n    } catch (error) {\n      console.error('Error loading data:', error);\n    }\n  };\n\n\n  // const createEarth = (scene) => {\n  //   // Earth geometry\n  //   const earthGeometry = new THREE.SphereGeometry(100, 64, 64);\n    \n  //   // Earth material with texture\n  //   const earthMaterial = new THREE.MeshPhongMaterial({\n  //     color: 0x2563eb,\n  //     shininess: 100\n  //   });\n    \n  //   const earth = new THREE.Mesh(earthGeometry, earthMaterial);\n  //   scene.add(earth);\n\n  //   // Add atmosphere\n  //   const atmosphereGeometry = new THREE.SphereGeometry(105, 32, 32);\n  //   const atmosphereMaterial = new THREE.MeshPhongMaterial({\n  //     color: 0x00d4ff,\n  //     transparent: true,\n  //     opacity: 0.1\n  //   });\n  //   const atmosphere = new THREE.Mesh(atmosphereGeometry, atmosphereMaterial);\n  //   scene.add(atmosphere);\n\n  //   // Add clouds\n  //   const cloudGeometry = new THREE.SphereGeometry(102, 32, 32);\n  //   const cloudMaterial = new THREE.MeshPhongMaterial({\n  //     color: 0xffffff,\n  //     transparent: true,\n  //     opacity: 0.3\n  //   });\n  //   const clouds = new THREE.Mesh(cloudGeometry, cloudMaterial);\n  //   scene.add(clouds);\n  // };\n\n  // const createDebrisObjects = (scene, debrisData) => {\n  //   if (!debrisData) return;\n\n  //   const debrisGroup = new THREE.Group();\n    \n  //   debrisData.debris_objects.forEach((debris, index) => {\n  //     // Create debris geometry based on size\n  //     const size = Math.max(0.5, Math.min(5, debris.size / 10));\n  //     const geometry = new THREE.SphereGeometry(size, 8, 8);\n      \n  //     // Create material based on feasibility\n  //     const color = debris.feasible ? 0x00ff00 : 0xff0000;\n  //     const material = new THREE.MeshBasicMaterial({ \n  //       color: color,\n  //       transparent: true,\n  //       opacity: 0.8\n  //     });\n      \n  //     const debrisMesh = new THREE.Mesh(geometry, material);\n      \n  //     // Position debris based on orbital parameters\n  //     const altitude = debris.altitude + 100; // Earth radius + altitude\n  //     const angle = (index / debrisData.debris_objects.length) * Math.PI * 2;\n      \n  //     debrisMesh.position.set(\n  //       Math.cos(angle) * altitude,\n  //       Math.sin(angle) * altitude * 0.3,\n  //       Math.sin(angle) * altitude * 0.7\n  //     );\n      \n  //     // Add user data for interaction\n  //     debrisMesh.userData = {\n  //       type: 'debris',\n  //       debrisData: debris\n  //     };\n      \n  //     debrisGroup.add(debrisMesh);\n  //   });\n    \n  //   scene.add(debrisGroup);\n  // };\n\n  // const createORCADrone = (scene) => {\n  //   // ORCA drone geometry\n  //   const droneGeometry = new THREE.BoxGeometry(2, 1, 3);\n  //   const droneMaterial = new THREE.MeshPhongMaterial({ color: 0xff6b6b });\n  //   const drone = new THREE.Mesh(droneGeometry, droneMaterial);\n    \n  //   // Position drone\n  //   drone.position.set(0, 0, 200);\n  //   drone.userData = { type: 'orca_drone' };\n    \n  //   scene.add(drone);\n  //   return drone;\n  // };\n\n  const animate = () => {\n    animationRef.current = requestAnimationFrame(animate);\n    \n    if (controlsRef.current) {\n      controlsRef.current.update();\n    }\n    \n    // Rotate Earth (only in Earth view)\n    if (viewMode === 'earth') {\n      const earth = sceneRef.current?.children.find(child => child.geometry.type === 'SphereGeometry');\n      if (earth) {\n        earth.rotation.y += 0.005;\n      }\n    }\n    \n    // Update debris positions\n    if (debrisData) {\n      updateDebrisPositions();\n    }\n    \n    // Update camera position based on view mode\n    updateCameraPosition();\n    \n    if (rendererRef.current && sceneRef.current) {\n      rendererRef.current.render(sceneRef.current, sceneRef.current.children.find(child => child.type === 'PerspectiveCamera'));\n    }\n  };\n\n  const updateCameraPosition = () => {\n    const camera = sceneRef.current?.children.find(child => child.type === 'PerspectiveCamera');\n    if (!camera) return;\n    \n    switch (viewMode) {\n      case 'earth':\n        // Earth view - close to Earth\n        camera.position.set(0, 0, 1000);\n        break;\n      case 'satellite':\n        // Satellite view - from above\n        camera.position.set(0, 2000, 0);\n        break;\n      case 'data':\n        // Data view - overview\n        camera.position.set(3000, 3000, 3000);\n        break;\n      default:\n        camera.position.set(0, 0, 1000);\n    }\n  };\n\n  const updateDebrisPositions = () => {\n    // Update debris orbital positions\n    const debrisGroup = sceneRef.current?.children.find(child => child.type === 'Group');\n    if (debrisGroup) {\n      debrisGroup.children.forEach((debris, index) => {\n        if (debris.userData.type === 'debris') {\n          const time = Date.now() * 0.0001;\n          const angle = (index / debrisGroup.children.length) * Math.PI * 2 + time;\n          const altitude = debris.userData.debrisData.altitude + 100;\n          \n          debris.position.set(\n            Math.cos(angle) * altitude,\n            Math.sin(angle) * altitude * 0.3,\n            Math.sin(angle) * altitude * 0.7\n          );\n        }\n      });\n    }\n  };\n\n  const handleDebrisClick = (event) => {\n    const mouse = new THREE.Vector2();\n    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n    const raycaster = new THREE.Raycaster();\n    raycaster.setFromCamera(mouse, sceneRef.current.children.find(child => child.type === 'PerspectiveCamera'));\n\n    const intersects = raycaster.intersectObjects(sceneRef.current.children, true);\n    \n    if (intersects.length > 0) {\n      const intersected = intersects[0].object;\n      if (intersected.userData.type === 'debris') {\n        setSelectedDebris(intersected.userData.debrisData);\n      }\n    }\n  };\n\n  const startMission = () => {\n    setIsPlaying(true);\n    // Start ORCA mission simulation\n    if (missionData) {\n      simulateORCAMission();\n    }\n  };\n\n  const simulateORCAMission = () => {\n    // Simulate ORCA capture mission\n    let step = 0;\n    const maxSteps = missionData.capture_results?.length || 10;\n    \n    const missionInterval = setInterval(() => {\n      if (step >= maxSteps) {\n        setIsPlaying(false);\n        clearInterval(missionInterval);\n        return;\n      }\n      \n      // Update metrics\n      const capture = missionData.capture_results[step];\n      if (capture.success) {\n        setMetrics(prev => ({\n          ...prev,\n          materialsRecovered: prev.materialsRecovered + capture.mass_recovered_kg,\n          costSavings: prev.costSavings + capture.value_recovered_usd\n        }));\n      }\n      \n      step++;\n      setCurrentTime(step);\n    }, 2000);\n  };\n\n  const resetMission = () => {\n    setIsPlaying(false);\n    setCurrentTime(0);\n    setMetrics({\n      totalDebris: debrisData?.metadata.total_objects || 0,\n      orcaFeasible: debrisData?.debris_objects.filter(d => d.feasible).length || 0,\n      materialsRecovered: 0,\n      partsManufactured: 0,\n      costSavings: 0\n    });\n  };\n\n  return (\n    <Container>\n      <div ref={mountRef} onClick={handleDebrisClick} />\n      \n      <ControlPanel>\n        <h3 style={{ color: '#00d4ff', marginBottom: '20px' }}>🛰️ ORCA Mission Control</h3>\n        \n        <ControlGroup>\n          <Label>Mission Controls</Label>\n          <Button onClick={startMission} disabled={isPlaying}>\n            🚀 Start Mission\n          </Button>\n          <Button onClick={resetMission} disabled={isPlaying}>\n            🔄 Reset\n          </Button>\n        </ControlGroup>\n        \n        <ControlGroup>\n          <Label>Time Control</Label>\n          <Slider\n            type=\"range\"\n            min=\"0\"\n            max=\"100\"\n            value={currentTime}\n            onChange={(e) => setCurrentTime(parseInt(e.target.value))}\n          />\n        </ControlGroup>\n        \n        <ControlGroup>\n          <Label>View Options</Label>\n          <Button \n            onClick={() => setViewMode('earth')}\n            style={{ background: viewMode === 'earth' ? 'rgba(0, 255, 255, 0.3)' : undefined }}\n          >\n            🌍 Earth View\n          </Button>\n          <Button \n            onClick={() => setViewMode('satellite')}\n            style={{ background: viewMode === 'satellite' ? 'rgba(0, 255, 255, 0.3)' : undefined }}\n          >\n            🛰️ Satellite View\n          </Button>\n          <Button \n            onClick={() => setViewMode('data')}\n            style={{ background: viewMode === 'data' ? 'rgba(0, 255, 255, 0.3)' : undefined }}\n          >\n            📊 Data View\n          </Button>\n        </ControlGroup>\n      </ControlPanel>\n      \n      <InfoPanel>\n        <h3 style={{ color: '#00d4ff', marginBottom: '15px' }}>📊 Mission Metrics</h3>\n        \n        <Metric>\n          <MetricLabel>Total Debris:</MetricLabel>\n          <MetricValue>{metrics.totalDebris.toLocaleString()}</MetricValue>\n        </Metric>\n        \n        <Metric>\n          <MetricLabel>ORCA Feasible:</MetricLabel>\n          <MetricValue>{metrics.orcaFeasible.toLocaleString()}</MetricValue>\n        </Metric>\n        \n        <Metric>\n          <MetricLabel>Materials Recovered:</MetricLabel>\n          <MetricValue>{metrics.materialsRecovered.toFixed(1)} kg</MetricValue>\n        </Metric>\n        \n        <Metric>\n          <MetricLabel>Parts Manufactured:</MetricLabel>\n          <MetricValue>{metrics.partsManufactured}</MetricValue>\n        </Metric>\n        \n        <Metric>\n          <MetricLabel>Cost Savings:</MetricLabel>\n          <MetricValue>${metrics.costSavings.toLocaleString()}</MetricValue>\n        </Metric>\n        \n        {selectedDebris && (\n          <div style={{ marginTop: '20px', padding: '10px', background: 'rgba(0, 212, 255, 0.1)', borderRadius: '5px' }}>\n            <h4 style={{ color: '#00d4ff', marginBottom: '10px' }}>Selected Debris</h4>\n            <p><strong>ID:</strong> {selectedDebris.id}</p>\n            <p><strong>Material:</strong> {selectedDebris.material}</p>\n            <p><strong>Size:</strong> {selectedDebris.size} cm</p>\n            <p><strong>Mass:</strong> {selectedDebris.mass} kg</p>\n            <p><strong>Feasible:</strong> {selectedDebris.feasible ? 'Yes' : 'No'}</p>\n            <p><strong>Priority:</strong> {(selectedDebris.priority * 100).toFixed(1)}%</p>\n          </div>\n        )}\n      </InfoPanel>\n      \n      <StatusIndicator>\n        <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>\n          <div style={{ \n            width: '10px', \n            height: '10px', \n            borderRadius: '50%', \n            backgroundColor: isPlaying ? '#00ff00' : '#ff0000' \n          }} />\n          <span>{isPlaying ? 'Mission Active' : 'Mission Standby'}</span>\n        </div>\n        <div style={{ fontSize: '12px', marginTop: '5px' }}>\n          Step: {currentTime} / 100\n        </div>\n      </StatusIndicator>\n    </Container>\n  );\n};\n\nexport default ORCAVisualization;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}