{"ast":null,"code":"import _objectSpread from\"/Users/parthzanwar/Desktop/Space Apps/public/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _taggedTemplateLiteral from\"/Users/parthzanwar/Desktop/Space Apps/public/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5,_templateObject6,_templateObject7,_templateObject8,_templateObject9,_templateObject0,_templateObject1;import React,{useState,useEffect,useRef}from'react';import styled from'styled-components';import*as THREE from'three';import{OrbitControls}from'three/examples/jsm/controls/OrbitControls';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Container=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  width: 100%;\\n  height: 100vh;\\n  position: relative;\\n  background: #000;\\n  overflow: hidden;\\n\"])));const ControlPanel=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  position: absolute;\\n  top: 20px;\\n  left: 20px;\\n  background: rgba(0, 0, 0, 0.8);\\n  padding: 20px;\\n  border-radius: 10px;\\n  color: white;\\n  z-index: 100;\\n  min-width: 300px;\\n\"])));const ControlGroup=styled.div(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  margin-bottom: 15px;\\n\"])));const Label=styled.label(_templateObject4||(_templateObject4=_taggedTemplateLiteral([\"\\n  display: block;\\n  margin-bottom: 5px;\\n  font-size: 14px;\\n  color: #00d4ff;\\n\"])));const Button=styled.button(_templateObject5||(_templateObject5=_taggedTemplateLiteral([\"\\n  background: linear-gradient(135deg, #00d4ff 0%, #0099cc 100%);\\n  color: white;\\n  border: none;\\n  padding: 10px 20px;\\n  border-radius: 5px;\\n  cursor: pointer;\\n  margin-right: 10px;\\n  margin-bottom: 10px;\\n  font-size: 12px;\\n  transition: all 0.3s ease;\\n\\n  &:hover {\\n    transform: translateY(-2px);\\n    box-shadow: 0 5px 15px rgba(0, 212, 255, 0.4);\\n  }\\n\\n  &:disabled {\\n    background: rgba(255, 255, 255, 0.1);\\n    cursor: not-allowed;\\n    transform: none;\\n  }\\n\"])));const Slider=styled.input(_templateObject6||(_templateObject6=_taggedTemplateLiteral([\"\\n  width: 100%;\\n  margin: 10px 0;\\n\"])));const InfoPanel=styled.div(_templateObject7||(_templateObject7=_taggedTemplateLiteral([\"\\n  position: absolute;\\n  top: 20px;\\n  right: 20px;\\n  background: rgba(0, 0, 0, 0.8);\\n  padding: 20px;\\n  border-radius: 10px;\\n  color: white;\\n  z-index: 100;\\n  min-width: 250px;\\n\"])));const Metric=styled.div(_templateObject8||(_templateObject8=_taggedTemplateLiteral([\"\\n  display: flex;\\n  justify-content: space-between;\\n  margin-bottom: 10px;\\n  font-size: 14px;\\n\"])));const MetricLabel=styled.span(_templateObject9||(_templateObject9=_taggedTemplateLiteral([\"\\n  color: #00d4ff;\\n\"])));const MetricValue=styled.span(_templateObject0||(_templateObject0=_taggedTemplateLiteral([\"\\n  color: white;\\n  font-weight: bold;\\n\"])));const StatusIndicator=styled.div(_templateObject1||(_templateObject1=_taggedTemplateLiteral([\"\\n  position: absolute;\\n  bottom: 20px;\\n  left: 20px;\\n  background: rgba(0, 0, 0, 0.8);\\n  padding: 15px;\\n  border-radius: 10px;\\n  color: white;\\n  z-index: 100;\\n\"])));const ORCAVisualization=()=>{const mountRef=useRef(null);const sceneRef=useRef(null);const rendererRef=useRef(null);const controlsRef=useRef(null);const animationRef=useRef(null);const[debrisData,setDebrisData]=useState(null);const[missionData,setMissionData]=useState(null);const[isPlaying,setIsPlaying]=useState(false);const[currentTime,setCurrentTime]=useState(0);const[selectedDebris,setSelectedDebris]=useState(null);const[viewMode,setViewMode]=useState('earth');const[metrics,setMetrics]=useState({totalDebris:0,orcaFeasible:0,materialsRecovered:0,partsManufactured:0,costSavings:0});useEffect(()=>{loadData();initializeScene();return()=>{if(animationRef.current){cancelAnimationFrame(animationRef.current);}if(rendererRef.current){rendererRef.current.dispose();}};},[initializeScene]);const loadData=async()=>{try{var _missionData$parts_ma,_missionData$economic;// Load orbital debris data\nconst debrisResponse=await fetch('/api/orbital-debris-data');const debrisData=await debrisResponse.json();setDebrisData(debrisData);// Load mission data\nconst missionResponse=await fetch('/api/orca-mission-data');const missionData=await missionResponse.json();setMissionData(missionData);// Update metrics\nsetMetrics({totalDebris:debrisData.metadata.total_objects,orcaFeasible:debrisData.debris_objects.filter(d=>d.feasible).length,materialsRecovered:missionData.materials_recovered||0,partsManufactured:((_missionData$parts_ma=missionData.parts_manufactured)===null||_missionData$parts_ma===void 0?void 0:_missionData$parts_ma.length)||0,costSavings:((_missionData$economic=missionData.economic_impact)===null||_missionData$economic===void 0?void 0:_missionData$economic.net_benefit_usd)||0});}catch(error){console.error('Error loading data:',error);}};const initializeScene=()=>{if(!mountRef.current)return;// Scene setup\nconst scene=new THREE.Scene();sceneRef.current=scene;// Camera setup\nconst camera=new THREE.PerspectiveCamera(75,mountRef.current.clientWidth/mountRef.current.clientHeight,0.1,10000);camera.position.set(0,0,1000);// Renderer setup\nconst renderer=new THREE.WebGLRenderer({antialias:true});renderer.setSize(mountRef.current.clientWidth,mountRef.current.clientHeight);renderer.setClearColor(0x000011);mountRef.current.appendChild(renderer.domElement);rendererRef.current=renderer;// Controls\nconst controls=new OrbitControls(camera,renderer.domElement);controls.enableDamping=true;controls.dampingFactor=0.05;controlsRef.current=controls;// Lighting\nconst ambientLight=new THREE.AmbientLight(0x404040,0.6);scene.add(ambientLight);const directionalLight=new THREE.DirectionalLight(0xffffff,0.8);directionalLight.position.set(1000,1000,1000);scene.add(directionalLight);// Create Earth\ncreateEarth(scene);// Start animation loop\nanimate();};const createEarth=scene=>{// Earth geometry\nconst earthGeometry=new THREE.SphereGeometry(100,64,64);// Earth material with texture\nconst earthMaterial=new THREE.MeshPhongMaterial({color:0x2563eb,shininess:100});const earth=new THREE.Mesh(earthGeometry,earthMaterial);scene.add(earth);// Add atmosphere\nconst atmosphereGeometry=new THREE.SphereGeometry(105,32,32);const atmosphereMaterial=new THREE.MeshPhongMaterial({color:0x00d4ff,transparent:true,opacity:0.1});const atmosphere=new THREE.Mesh(atmosphereGeometry,atmosphereMaterial);scene.add(atmosphere);// Add clouds\nconst cloudGeometry=new THREE.SphereGeometry(102,32,32);const cloudMaterial=new THREE.MeshPhongMaterial({color:0xffffff,transparent:true,opacity:0.3});const clouds=new THREE.Mesh(cloudGeometry,cloudMaterial);scene.add(clouds);};// const createDebrisObjects = (scene, debrisData) => {\n//   if (!debrisData) return;\n//   const debrisGroup = new THREE.Group();\n//   debrisData.debris_objects.forEach((debris, index) => {\n//     // Create debris geometry based on size\n//     const size = Math.max(0.5, Math.min(5, debris.size / 10));\n//     const geometry = new THREE.SphereGeometry(size, 8, 8);\n//     // Create material based on feasibility\n//     const color = debris.feasible ? 0x00ff00 : 0xff0000;\n//     const material = new THREE.MeshBasicMaterial({ \n//       color: color,\n//       transparent: true,\n//       opacity: 0.8\n//     });\n//     const debrisMesh = new THREE.Mesh(geometry, material);\n//     // Position debris based on orbital parameters\n//     const altitude = debris.altitude + 100; // Earth radius + altitude\n//     const angle = (index / debrisData.debris_objects.length) * Math.PI * 2;\n//     debrisMesh.position.set(\n//       Math.cos(angle) * altitude,\n//       Math.sin(angle) * altitude * 0.3,\n//       Math.sin(angle) * altitude * 0.7\n//     );\n//     // Add user data for interaction\n//     debrisMesh.userData = {\n//       type: 'debris',\n//       debrisData: debris\n//     };\n//     debrisGroup.add(debrisMesh);\n//   });\n//   scene.add(debrisGroup);\n// };\n// const createORCADrone = (scene) => {\n//   // ORCA drone geometry\n//   const droneGeometry = new THREE.BoxGeometry(2, 1, 3);\n//   const droneMaterial = new THREE.MeshPhongMaterial({ color: 0xff6b6b });\n//   const drone = new THREE.Mesh(droneGeometry, droneMaterial);\n//   // Position drone\n//   drone.position.set(0, 0, 200);\n//   drone.userData = { type: 'orca_drone' };\n//   scene.add(drone);\n//   return drone;\n// };\nconst animate=()=>{animationRef.current=requestAnimationFrame(animate);if(controlsRef.current){controlsRef.current.update();}// Rotate Earth (only in Earth view)\nif(viewMode==='earth'){var _sceneRef$current;const earth=(_sceneRef$current=sceneRef.current)===null||_sceneRef$current===void 0?void 0:_sceneRef$current.children.find(child=>child.geometry.type==='SphereGeometry');if(earth){earth.rotation.y+=0.005;}}// Update debris positions\nif(debrisData){updateDebrisPositions();}// Update camera position based on view mode\nupdateCameraPosition();if(rendererRef.current&&sceneRef.current){rendererRef.current.render(sceneRef.current,sceneRef.current.children.find(child=>child.type==='PerspectiveCamera'));}};const updateCameraPosition=()=>{var _sceneRef$current2;const camera=(_sceneRef$current2=sceneRef.current)===null||_sceneRef$current2===void 0?void 0:_sceneRef$current2.children.find(child=>child.type==='PerspectiveCamera');if(!camera)return;switch(viewMode){case'earth':// Earth view - close to Earth\ncamera.position.set(0,0,1000);break;case'satellite':// Satellite view - from above\ncamera.position.set(0,2000,0);break;case'data':// Data view - overview\ncamera.position.set(3000,3000,3000);break;default:camera.position.set(0,0,1000);}};const updateDebrisPositions=()=>{var _sceneRef$current3;// Update debris orbital positions\nconst debrisGroup=(_sceneRef$current3=sceneRef.current)===null||_sceneRef$current3===void 0?void 0:_sceneRef$current3.children.find(child=>child.type==='Group');if(debrisGroup){debrisGroup.children.forEach((debris,index)=>{if(debris.userData.type==='debris'){const time=Date.now()*0.0001;const angle=index/debrisGroup.children.length*Math.PI*2+time;const altitude=debris.userData.debrisData.altitude+100;debris.position.set(Math.cos(angle)*altitude,Math.sin(angle)*altitude*0.3,Math.sin(angle)*altitude*0.7);}});}};const handleDebrisClick=event=>{const mouse=new THREE.Vector2();mouse.x=event.clientX/window.innerWidth*2-1;mouse.y=-(event.clientY/window.innerHeight)*2+1;const raycaster=new THREE.Raycaster();raycaster.setFromCamera(mouse,sceneRef.current.children.find(child=>child.type==='PerspectiveCamera'));const intersects=raycaster.intersectObjects(sceneRef.current.children,true);if(intersects.length>0){const intersected=intersects[0].object;if(intersected.userData.type==='debris'){setSelectedDebris(intersected.userData.debrisData);}}};const startMission=()=>{setIsPlaying(true);// Start ORCA mission simulation\nif(missionData){simulateORCAMission();}};const simulateORCAMission=()=>{var _missionData$capture_;// Simulate ORCA capture mission\nlet step=0;const maxSteps=((_missionData$capture_=missionData.capture_results)===null||_missionData$capture_===void 0?void 0:_missionData$capture_.length)||10;const missionInterval=setInterval(()=>{if(step>=maxSteps){setIsPlaying(false);clearInterval(missionInterval);return;}// Update metrics\nconst capture=missionData.capture_results[step];if(capture.success){setMetrics(prev=>_objectSpread(_objectSpread({},prev),{},{materialsRecovered:prev.materialsRecovered+capture.mass_recovered_kg,costSavings:prev.costSavings+capture.value_recovered_usd}));}step++;setCurrentTime(step);},2000);};const resetMission=()=>{setIsPlaying(false);setCurrentTime(0);setMetrics({totalDebris:(debrisData===null||debrisData===void 0?void 0:debrisData.metadata.total_objects)||0,orcaFeasible:(debrisData===null||debrisData===void 0?void 0:debrisData.debris_objects.filter(d=>d.feasible).length)||0,materialsRecovered:0,partsManufactured:0,costSavings:0});};return/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsx(\"div\",{ref:mountRef,onClick:handleDebrisClick}),/*#__PURE__*/_jsxs(ControlPanel,{children:[/*#__PURE__*/_jsx(\"h3\",{style:{color:'#00d4ff',marginBottom:'20px'},children:\"\\uD83D\\uDEF0\\uFE0F ORCA Mission Control\"}),/*#__PURE__*/_jsxs(ControlGroup,{children:[/*#__PURE__*/_jsx(Label,{children:\"Mission Controls\"}),/*#__PURE__*/_jsx(Button,{onClick:startMission,disabled:isPlaying,children:\"\\uD83D\\uDE80 Start Mission\"}),/*#__PURE__*/_jsx(Button,{onClick:resetMission,disabled:isPlaying,children:\"\\uD83D\\uDD04 Reset\"})]}),/*#__PURE__*/_jsxs(ControlGroup,{children:[/*#__PURE__*/_jsx(Label,{children:\"Time Control\"}),/*#__PURE__*/_jsx(Slider,{type:\"range\",min:\"0\",max:\"100\",value:currentTime,onChange:e=>setCurrentTime(parseInt(e.target.value))})]}),/*#__PURE__*/_jsxs(ControlGroup,{children:[/*#__PURE__*/_jsx(Label,{children:\"View Options\"}),/*#__PURE__*/_jsx(Button,{onClick:()=>setViewMode('earth'),style:{background:viewMode==='earth'?'rgba(0, 255, 255, 0.3)':undefined},children:\"\\uD83C\\uDF0D Earth View\"}),/*#__PURE__*/_jsx(Button,{onClick:()=>setViewMode('satellite'),style:{background:viewMode==='satellite'?'rgba(0, 255, 255, 0.3)':undefined},children:\"\\uD83D\\uDEF0\\uFE0F Satellite View\"}),/*#__PURE__*/_jsx(Button,{onClick:()=>setViewMode('data'),style:{background:viewMode==='data'?'rgba(0, 255, 255, 0.3)':undefined},children:\"\\uD83D\\uDCCA Data View\"})]})]}),/*#__PURE__*/_jsxs(InfoPanel,{children:[/*#__PURE__*/_jsx(\"h3\",{style:{color:'#00d4ff',marginBottom:'15px'},children:\"\\uD83D\\uDCCA Mission Metrics\"}),/*#__PURE__*/_jsxs(Metric,{children:[/*#__PURE__*/_jsx(MetricLabel,{children:\"Total Debris:\"}),/*#__PURE__*/_jsx(MetricValue,{children:metrics.totalDebris.toLocaleString()})]}),/*#__PURE__*/_jsxs(Metric,{children:[/*#__PURE__*/_jsx(MetricLabel,{children:\"ORCA Feasible:\"}),/*#__PURE__*/_jsx(MetricValue,{children:metrics.orcaFeasible.toLocaleString()})]}),/*#__PURE__*/_jsxs(Metric,{children:[/*#__PURE__*/_jsx(MetricLabel,{children:\"Materials Recovered:\"}),/*#__PURE__*/_jsxs(MetricValue,{children:[metrics.materialsRecovered.toFixed(1),\" kg\"]})]}),/*#__PURE__*/_jsxs(Metric,{children:[/*#__PURE__*/_jsx(MetricLabel,{children:\"Parts Manufactured:\"}),/*#__PURE__*/_jsx(MetricValue,{children:metrics.partsManufactured})]}),/*#__PURE__*/_jsxs(Metric,{children:[/*#__PURE__*/_jsx(MetricLabel,{children:\"Cost Savings:\"}),/*#__PURE__*/_jsxs(MetricValue,{children:[\"$\",metrics.costSavings.toLocaleString()]})]}),selectedDebris&&/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:'20px',padding:'10px',background:'rgba(0, 212, 255, 0.1)',borderRadius:'5px'},children:[/*#__PURE__*/_jsx(\"h4\",{style:{color:'#00d4ff',marginBottom:'10px'},children:\"Selected Debris\"}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"ID:\"}),\" \",selectedDebris.id]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Material:\"}),\" \",selectedDebris.material]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Size:\"}),\" \",selectedDebris.size,\" cm\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Mass:\"}),\" \",selectedDebris.mass,\" kg\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Feasible:\"}),\" \",selectedDebris.feasible?'Yes':'No']}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Priority:\"}),\" \",(selectedDebris.priority*100).toFixed(1),\"%\"]})]})]}),/*#__PURE__*/_jsxs(StatusIndicator,{children:[/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center',gap:'10px'},children:[/*#__PURE__*/_jsx(\"div\",{style:{width:'10px',height:'10px',borderRadius:'50%',backgroundColor:isPlaying?'#00ff00':'#ff0000'}}),/*#__PURE__*/_jsx(\"span\",{children:isPlaying?'Mission Active':'Mission Standby'})]}),/*#__PURE__*/_jsxs(\"div\",{style:{fontSize:'12px',marginTop:'5px'},children:[\"Step: \",currentTime,\" / 100\"]})]})]});};export default ORCAVisualization;","map":{"version":3,"names":["React","useState","useEffect","useRef","styled","THREE","OrbitControls","jsx","_jsx","jsxs","_jsxs","Container","div","_templateObject","_taggedTemplateLiteral","ControlPanel","_templateObject2","ControlGroup","_templateObject3","Label","label","_templateObject4","Button","button","_templateObject5","Slider","input","_templateObject6","InfoPanel","_templateObject7","Metric","_templateObject8","MetricLabel","span","_templateObject9","MetricValue","_templateObject0","StatusIndicator","_templateObject1","ORCAVisualization","mountRef","sceneRef","rendererRef","controlsRef","animationRef","debrisData","setDebrisData","missionData","setMissionData","isPlaying","setIsPlaying","currentTime","setCurrentTime","selectedDebris","setSelectedDebris","viewMode","setViewMode","metrics","setMetrics","totalDebris","orcaFeasible","materialsRecovered","partsManufactured","costSavings","loadData","initializeScene","current","cancelAnimationFrame","dispose","_missionData$parts_ma","_missionData$economic","debrisResponse","fetch","json","missionResponse","metadata","total_objects","debris_objects","filter","d","feasible","length","materials_recovered","parts_manufactured","economic_impact","net_benefit_usd","error","console","scene","Scene","camera","PerspectiveCamera","clientWidth","clientHeight","position","set","renderer","WebGLRenderer","antialias","setSize","setClearColor","appendChild","domElement","controls","enableDamping","dampingFactor","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","createEarth","animate","earthGeometry","SphereGeometry","earthMaterial","MeshPhongMaterial","color","shininess","earth","Mesh","atmosphereGeometry","atmosphereMaterial","transparent","opacity","atmosphere","cloudGeometry","cloudMaterial","clouds","requestAnimationFrame","update","_sceneRef$current","children","find","child","geometry","type","rotation","y","updateDebrisPositions","updateCameraPosition","render","_sceneRef$current2","_sceneRef$current3","debrisGroup","forEach","debris","index","userData","time","Date","now","angle","Math","PI","altitude","cos","sin","handleDebrisClick","event","mouse","Vector2","x","clientX","window","innerWidth","clientY","innerHeight","raycaster","Raycaster","setFromCamera","intersects","intersectObjects","intersected","object","startMission","simulateORCAMission","_missionData$capture_","step","maxSteps","capture_results","missionInterval","setInterval","clearInterval","capture","success","prev","_objectSpread","mass_recovered_kg","value_recovered_usd","resetMission","ref","onClick","style","marginBottom","disabled","min","max","value","onChange","e","parseInt","target","background","undefined","toLocaleString","toFixed","marginTop","padding","borderRadius","id","material","size","mass","priority","display","alignItems","gap","width","height","backgroundColor","fontSize"],"sources":["/Users/parthzanwar/Desktop/Space Apps/public/src/components/ORCAVisualization.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nconst Container = styled.div`\n  width: 100%;\n  height: 100vh;\n  position: relative;\n  background: #000;\n  overflow: hidden;\n`;\n\nconst ControlPanel = styled.div`\n  position: absolute;\n  top: 20px;\n  left: 20px;\n  background: rgba(0, 0, 0, 0.8);\n  padding: 20px;\n  border-radius: 10px;\n  color: white;\n  z-index: 100;\n  min-width: 300px;\n`;\n\nconst ControlGroup = styled.div`\n  margin-bottom: 15px;\n`;\n\nconst Label = styled.label`\n  display: block;\n  margin-bottom: 5px;\n  font-size: 14px;\n  color: #00d4ff;\n`;\n\nconst Button = styled.button`\n  background: linear-gradient(135deg, #00d4ff 0%, #0099cc 100%);\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  border-radius: 5px;\n  cursor: pointer;\n  margin-right: 10px;\n  margin-bottom: 10px;\n  font-size: 12px;\n  transition: all 0.3s ease;\n\n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 5px 15px rgba(0, 212, 255, 0.4);\n  }\n\n  &:disabled {\n    background: rgba(255, 255, 255, 0.1);\n    cursor: not-allowed;\n    transform: none;\n  }\n`;\n\nconst Slider = styled.input`\n  width: 100%;\n  margin: 10px 0;\n`;\n\nconst InfoPanel = styled.div`\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  background: rgba(0, 0, 0, 0.8);\n  padding: 20px;\n  border-radius: 10px;\n  color: white;\n  z-index: 100;\n  min-width: 250px;\n`;\n\nconst Metric = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 10px;\n  font-size: 14px;\n`;\n\nconst MetricLabel = styled.span`\n  color: #00d4ff;\n`;\n\nconst MetricValue = styled.span`\n  color: white;\n  font-weight: bold;\n`;\n\nconst StatusIndicator = styled.div`\n  position: absolute;\n  bottom: 20px;\n  left: 20px;\n  background: rgba(0, 0, 0, 0.8);\n  padding: 15px;\n  border-radius: 10px;\n  color: white;\n  z-index: 100;\n`;\n\nconst ORCAVisualization = () => {\n  const mountRef = useRef(null);\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const controlsRef = useRef(null);\n  const animationRef = useRef(null);\n  \n  const [debrisData, setDebrisData] = useState(null);\n  const [missionData, setMissionData] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [selectedDebris, setSelectedDebris] = useState(null);\n  const [viewMode, setViewMode] = useState('earth');\n  const [metrics, setMetrics] = useState({\n    totalDebris: 0,\n    orcaFeasible: 0,\n    materialsRecovered: 0,\n    partsManufactured: 0,\n    costSavings: 0\n  });\n\n  useEffect(() => {\n    loadData();\n    initializeScene();\n    \n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n      if (rendererRef.current) {\n        rendererRef.current.dispose();\n      }\n    };\n  }, [initializeScene]);\n\n  const loadData = async () => {\n    try {\n      // Load orbital debris data\n      const debrisResponse = await fetch('/api/orbital-debris-data');\n      const debrisData = await debrisResponse.json();\n      setDebrisData(debrisData);\n\n      // Load mission data\n      const missionResponse = await fetch('/api/orca-mission-data');\n      const missionData = await missionResponse.json();\n      setMissionData(missionData);\n\n      // Update metrics\n      setMetrics({\n        totalDebris: debrisData.metadata.total_objects,\n        orcaFeasible: debrisData.debris_objects.filter(d => d.feasible).length,\n        materialsRecovered: missionData.materials_recovered || 0,\n        partsManufactured: missionData.parts_manufactured?.length || 0,\n        costSavings: missionData.economic_impact?.net_benefit_usd || 0\n      });\n    } catch (error) {\n      console.error('Error loading data:', error);\n    }\n  };\n\n  const initializeScene = () => {\n    if (!mountRef.current) return;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    sceneRef.current = scene;\n\n    // Camera setup\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      mountRef.current.clientWidth / mountRef.current.clientHeight,\n      0.1,\n      10000\n    );\n    camera.position.set(0, 0, 1000);\n\n    // Renderer setup\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n    renderer.setClearColor(0x000011);\n    mountRef.current.appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n\n    // Controls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    controlsRef.current = controls;\n\n    // Lighting\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.6);\n    scene.add(ambientLight);\n\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(1000, 1000, 1000);\n    scene.add(directionalLight);\n\n    // Create Earth\n    createEarth(scene);\n\n    // Start animation loop\n    animate();\n  };\n\n  const createEarth = (scene) => {\n    // Earth geometry\n    const earthGeometry = new THREE.SphereGeometry(100, 64, 64);\n    \n    // Earth material with texture\n    const earthMaterial = new THREE.MeshPhongMaterial({\n      color: 0x2563eb,\n      shininess: 100\n    });\n    \n    const earth = new THREE.Mesh(earthGeometry, earthMaterial);\n    scene.add(earth);\n\n    // Add atmosphere\n    const atmosphereGeometry = new THREE.SphereGeometry(105, 32, 32);\n    const atmosphereMaterial = new THREE.MeshPhongMaterial({\n      color: 0x00d4ff,\n      transparent: true,\n      opacity: 0.1\n    });\n    const atmosphere = new THREE.Mesh(atmosphereGeometry, atmosphereMaterial);\n    scene.add(atmosphere);\n\n    // Add clouds\n    const cloudGeometry = new THREE.SphereGeometry(102, 32, 32);\n    const cloudMaterial = new THREE.MeshPhongMaterial({\n      color: 0xffffff,\n      transparent: true,\n      opacity: 0.3\n    });\n    const clouds = new THREE.Mesh(cloudGeometry, cloudMaterial);\n    scene.add(clouds);\n  };\n\n  // const createDebrisObjects = (scene, debrisData) => {\n  //   if (!debrisData) return;\n\n  //   const debrisGroup = new THREE.Group();\n    \n  //   debrisData.debris_objects.forEach((debris, index) => {\n  //     // Create debris geometry based on size\n  //     const size = Math.max(0.5, Math.min(5, debris.size / 10));\n  //     const geometry = new THREE.SphereGeometry(size, 8, 8);\n      \n  //     // Create material based on feasibility\n  //     const color = debris.feasible ? 0x00ff00 : 0xff0000;\n  //     const material = new THREE.MeshBasicMaterial({ \n  //       color: color,\n  //       transparent: true,\n  //       opacity: 0.8\n  //     });\n      \n  //     const debrisMesh = new THREE.Mesh(geometry, material);\n      \n  //     // Position debris based on orbital parameters\n  //     const altitude = debris.altitude + 100; // Earth radius + altitude\n  //     const angle = (index / debrisData.debris_objects.length) * Math.PI * 2;\n      \n  //     debrisMesh.position.set(\n  //       Math.cos(angle) * altitude,\n  //       Math.sin(angle) * altitude * 0.3,\n  //       Math.sin(angle) * altitude * 0.7\n  //     );\n      \n  //     // Add user data for interaction\n  //     debrisMesh.userData = {\n  //       type: 'debris',\n  //       debrisData: debris\n  //     };\n      \n  //     debrisGroup.add(debrisMesh);\n  //   });\n    \n  //   scene.add(debrisGroup);\n  // };\n\n  // const createORCADrone = (scene) => {\n  //   // ORCA drone geometry\n  //   const droneGeometry = new THREE.BoxGeometry(2, 1, 3);\n  //   const droneMaterial = new THREE.MeshPhongMaterial({ color: 0xff6b6b });\n  //   const drone = new THREE.Mesh(droneGeometry, droneMaterial);\n    \n  //   // Position drone\n  //   drone.position.set(0, 0, 200);\n  //   drone.userData = { type: 'orca_drone' };\n    \n  //   scene.add(drone);\n  //   return drone;\n  // };\n\n  const animate = () => {\n    animationRef.current = requestAnimationFrame(animate);\n    \n    if (controlsRef.current) {\n      controlsRef.current.update();\n    }\n    \n    // Rotate Earth (only in Earth view)\n    if (viewMode === 'earth') {\n      const earth = sceneRef.current?.children.find(child => child.geometry.type === 'SphereGeometry');\n      if (earth) {\n        earth.rotation.y += 0.005;\n      }\n    }\n    \n    // Update debris positions\n    if (debrisData) {\n      updateDebrisPositions();\n    }\n    \n    // Update camera position based on view mode\n    updateCameraPosition();\n    \n    if (rendererRef.current && sceneRef.current) {\n      rendererRef.current.render(sceneRef.current, sceneRef.current.children.find(child => child.type === 'PerspectiveCamera'));\n    }\n  };\n\n  const updateCameraPosition = () => {\n    const camera = sceneRef.current?.children.find(child => child.type === 'PerspectiveCamera');\n    if (!camera) return;\n    \n    switch (viewMode) {\n      case 'earth':\n        // Earth view - close to Earth\n        camera.position.set(0, 0, 1000);\n        break;\n      case 'satellite':\n        // Satellite view - from above\n        camera.position.set(0, 2000, 0);\n        break;\n      case 'data':\n        // Data view - overview\n        camera.position.set(3000, 3000, 3000);\n        break;\n      default:\n        camera.position.set(0, 0, 1000);\n    }\n  };\n\n  const updateDebrisPositions = () => {\n    // Update debris orbital positions\n    const debrisGroup = sceneRef.current?.children.find(child => child.type === 'Group');\n    if (debrisGroup) {\n      debrisGroup.children.forEach((debris, index) => {\n        if (debris.userData.type === 'debris') {\n          const time = Date.now() * 0.0001;\n          const angle = (index / debrisGroup.children.length) * Math.PI * 2 + time;\n          const altitude = debris.userData.debrisData.altitude + 100;\n          \n          debris.position.set(\n            Math.cos(angle) * altitude,\n            Math.sin(angle) * altitude * 0.3,\n            Math.sin(angle) * altitude * 0.7\n          );\n        }\n      });\n    }\n  };\n\n  const handleDebrisClick = (event) => {\n    const mouse = new THREE.Vector2();\n    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n    const raycaster = new THREE.Raycaster();\n    raycaster.setFromCamera(mouse, sceneRef.current.children.find(child => child.type === 'PerspectiveCamera'));\n\n    const intersects = raycaster.intersectObjects(sceneRef.current.children, true);\n    \n    if (intersects.length > 0) {\n      const intersected = intersects[0].object;\n      if (intersected.userData.type === 'debris') {\n        setSelectedDebris(intersected.userData.debrisData);\n      }\n    }\n  };\n\n  const startMission = () => {\n    setIsPlaying(true);\n    // Start ORCA mission simulation\n    if (missionData) {\n      simulateORCAMission();\n    }\n  };\n\n  const simulateORCAMission = () => {\n    // Simulate ORCA capture mission\n    let step = 0;\n    const maxSteps = missionData.capture_results?.length || 10;\n    \n    const missionInterval = setInterval(() => {\n      if (step >= maxSteps) {\n        setIsPlaying(false);\n        clearInterval(missionInterval);\n        return;\n      }\n      \n      // Update metrics\n      const capture = missionData.capture_results[step];\n      if (capture.success) {\n        setMetrics(prev => ({\n          ...prev,\n          materialsRecovered: prev.materialsRecovered + capture.mass_recovered_kg,\n          costSavings: prev.costSavings + capture.value_recovered_usd\n        }));\n      }\n      \n      step++;\n      setCurrentTime(step);\n    }, 2000);\n  };\n\n  const resetMission = () => {\n    setIsPlaying(false);\n    setCurrentTime(0);\n    setMetrics({\n      totalDebris: debrisData?.metadata.total_objects || 0,\n      orcaFeasible: debrisData?.debris_objects.filter(d => d.feasible).length || 0,\n      materialsRecovered: 0,\n      partsManufactured: 0,\n      costSavings: 0\n    });\n  };\n\n  return (\n    <Container>\n      <div ref={mountRef} onClick={handleDebrisClick} />\n      \n      <ControlPanel>\n        <h3 style={{ color: '#00d4ff', marginBottom: '20px' }}>🛰️ ORCA Mission Control</h3>\n        \n        <ControlGroup>\n          <Label>Mission Controls</Label>\n          <Button onClick={startMission} disabled={isPlaying}>\n            🚀 Start Mission\n          </Button>\n          <Button onClick={resetMission} disabled={isPlaying}>\n            🔄 Reset\n          </Button>\n        </ControlGroup>\n        \n        <ControlGroup>\n          <Label>Time Control</Label>\n          <Slider\n            type=\"range\"\n            min=\"0\"\n            max=\"100\"\n            value={currentTime}\n            onChange={(e) => setCurrentTime(parseInt(e.target.value))}\n          />\n        </ControlGroup>\n        \n        <ControlGroup>\n          <Label>View Options</Label>\n          <Button \n            onClick={() => setViewMode('earth')}\n            style={{ background: viewMode === 'earth' ? 'rgba(0, 255, 255, 0.3)' : undefined }}\n          >\n            🌍 Earth View\n          </Button>\n          <Button \n            onClick={() => setViewMode('satellite')}\n            style={{ background: viewMode === 'satellite' ? 'rgba(0, 255, 255, 0.3)' : undefined }}\n          >\n            🛰️ Satellite View\n          </Button>\n          <Button \n            onClick={() => setViewMode('data')}\n            style={{ background: viewMode === 'data' ? 'rgba(0, 255, 255, 0.3)' : undefined }}\n          >\n            📊 Data View\n          </Button>\n        </ControlGroup>\n      </ControlPanel>\n      \n      <InfoPanel>\n        <h3 style={{ color: '#00d4ff', marginBottom: '15px' }}>📊 Mission Metrics</h3>\n        \n        <Metric>\n          <MetricLabel>Total Debris:</MetricLabel>\n          <MetricValue>{metrics.totalDebris.toLocaleString()}</MetricValue>\n        </Metric>\n        \n        <Metric>\n          <MetricLabel>ORCA Feasible:</MetricLabel>\n          <MetricValue>{metrics.orcaFeasible.toLocaleString()}</MetricValue>\n        </Metric>\n        \n        <Metric>\n          <MetricLabel>Materials Recovered:</MetricLabel>\n          <MetricValue>{metrics.materialsRecovered.toFixed(1)} kg</MetricValue>\n        </Metric>\n        \n        <Metric>\n          <MetricLabel>Parts Manufactured:</MetricLabel>\n          <MetricValue>{metrics.partsManufactured}</MetricValue>\n        </Metric>\n        \n        <Metric>\n          <MetricLabel>Cost Savings:</MetricLabel>\n          <MetricValue>${metrics.costSavings.toLocaleString()}</MetricValue>\n        </Metric>\n        \n        {selectedDebris && (\n          <div style={{ marginTop: '20px', padding: '10px', background: 'rgba(0, 212, 255, 0.1)', borderRadius: '5px' }}>\n            <h4 style={{ color: '#00d4ff', marginBottom: '10px' }}>Selected Debris</h4>\n            <p><strong>ID:</strong> {selectedDebris.id}</p>\n            <p><strong>Material:</strong> {selectedDebris.material}</p>\n            <p><strong>Size:</strong> {selectedDebris.size} cm</p>\n            <p><strong>Mass:</strong> {selectedDebris.mass} kg</p>\n            <p><strong>Feasible:</strong> {selectedDebris.feasible ? 'Yes' : 'No'}</p>\n            <p><strong>Priority:</strong> {(selectedDebris.priority * 100).toFixed(1)}%</p>\n          </div>\n        )}\n      </InfoPanel>\n      \n      <StatusIndicator>\n        <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>\n          <div style={{ \n            width: '10px', \n            height: '10px', \n            borderRadius: '50%', \n            backgroundColor: isPlaying ? '#00ff00' : '#ff0000' \n          }} />\n          <span>{isPlaying ? 'Mission Active' : 'Mission Standby'}</span>\n        </div>\n        <div style={{ fontSize: '12px', marginTop: '5px' }}>\n          Step: {currentTime} / 100\n        </div>\n      </StatusIndicator>\n    </Container>\n  );\n};\n\nexport default ORCAVisualization;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}